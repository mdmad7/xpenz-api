var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/Account.html",[0,1.585,1,1.342]],["body/interfaces/Account.html",[0,2.268,1,1.92,2,2.269,3,0.308,4,0.308,5,0.267,6,2.269,7,0.308,8,1.516,9,4.229,10,2.044,11,1.223,12,3.265,13,3.265,14,0.72,15,4.229,16,1.353,17,0.03,18,3.265,19,0.491,20,0.975,21,2.047,22,2.047,23,2.047,24,1.443,25,2.047,26,2.725,27,1.332,28,2.047,29,3.02,30,2.97,31,3.619,32,2.97,33,0.016,34,0.021,35,0.016]],["title/controllers/ActivitiesController.html",[36,1.585,37,2.11]],["body/controllers/ActivitiesController.html",[3,0.184,4,0.184,5,0.16,7,0.184,10,0.736,11,1.041,14,0.536,17,0.031,19,0.184,33,0.01,34,0.015,35,0.01,36,1.019,37,2.087,38,1.019,39,1.746,40,1.523,41,2.084,42,1.225,43,2.696,44,3.271,45,2.685,46,3.271,47,2.685,48,3.271,49,2.084,50,3.154,51,1.546,52,2.084,53,0.878,54,2.084,55,1.808,56,1.808,57,4.11,58,1.808,59,2.084,60,3.35,61,2.084,62,2.084,63,2.084,64,3.154,65,2.084,66,2.084,67,2.084,68,2.084,69,2.084,70,2.084,71,3.154,72,1.746,73,2.084,74,0.696,75,2.342,76,2.854,77,1.523,78,3.204,79,3.672,80,1.746,81,2.779,82,2.542,83,1.746,84,1.713,85,1.523,86,0.539,87,1.523,88,1.019,89,2.087,90,1.746,91,1.357,92,2.685,93,1.114,94,1.357,95,1.523,96,1.746,97,1.746,98,1.746,99,1.523,100,1.357,101,2.342,102,1.224,103,2.084,104,1.523,105,0.027,106,1.357,107,3.458,108,1.814,109,3.454,110,2.313,111,2.084,112,3.458,113,1.808,114,2.412,115,2.854,116,2.544,117,3.204,118,2.542,119,2.084,120,2.084,121,2.084,122,2.087,123,1.616,124,2.087,125,1.909,126,1.746,127,1.883,128,2.084,129,2.084,130,2.084,131,1.746,132,2.084,133,2.084,134,2.084,135,1.746,136,2.084,137,1.746,138,1.224,139,2.084,140,1.357,141,1.357,142,1.746,143,1.746,144,1.746,145,2.685,146,2.084,147,1.523,148,1.746]],["title/modules/ActivitiesModule.html",[149,1.342,150,1.904]],["body/modules/ActivitiesModule.html",[3,0.358,4,0.358,5,0.31,11,0.892,17,0.03,19,0.358,33,0.019,34,0.023,35,0.019,37,3.649,38,2.501,74,0.767,86,1.048,89,3.312,90,3.395,101,2.166,105,0.052,149,2.32,150,3.64,151,1.982,152,1.982,153,2.381,154,2.381,155,1.982,156,3.292,157,2.381,158,3.395,159,3.395,160,3.005,161,1.821,162,2.381,163,4.052,164,2.962,165,2.166,166,4.052,167,3.738,168,4.052,169,2.639,170,3.395,171,2.962]],["title/injectables/ActivitiesService.html",[89,1.732,172,1.145]],["body/injectables/ActivitiesService.html",[3,0.171,4,0.171,5,0.148,7,0.171,10,1.851,11,1.066,14,0.549,17,0.031,19,0.171,20,1.79,33,0.009,34,0.014,35,0.009,42,1.156,43,2.656,44,3.12,45,2.533,46,2.533,47,2.533,48,3.12,50,2.974,53,0.9,55,1.852,56,1.852,58,1.746,60,3.215,64,2.846,71,3.078,74,0.696,82,1.969,86,0.5,89,1.616,91,1.259,92,2.533,96,1.62,97,1.62,98,1.62,99,1.414,100,1.259,101,1.616,102,1.136,105,0.025,108,2.361,109,1.777,110,2.369,113,1.746,114,0.869,122,1.034,123,1.743,124,1.259,125,0.946,127,1.136,135,1.62,138,2.474,165,1.034,172,1.068,173,1.034,174,1.62,175,1.777,176,1.934,177,3.528,178,1.934,179,3.024,180,1.934,181,1.934,182,3.024,183,1.934,184,3.024,185,1.934,186,3.024,187,1.934,188,1.934,189,1.934,190,2.533,191,1.414,192,1.62,193,1.414,194,1.934,195,1.414,196,1.259,197,3.528,198,1.414,199,2.533,200,1.62,201,2.722,202,1.934,203,1.934,204,3.024,205,3.723,206,1.934,207,1.99,208,1.934,209,1.934,210,1.934,211,1.934,212,1.934,213,1.934,214,3.12,215,1.934,216,1.934,217,1.934,218,2.533,219,4.21,220,1.934,221,1.934,222,1.934,223,2.21,224,1.62,225,1.934,226,1.934,227,4.059,228,3.541,229,3.024,230,1.934,231,1.934,232,1.934,233,1.934,234,3.024,235,3.024,236,1.934,237,1.934,238,1.934,239,1.934,240,1.934,241,1.934,242,1.99,243,1.934,244,1.934,245,1.934,246,1.934,247,1.934,248,1.034,249,1.934,250,1.934]],["title/interfaces/Activity.html",[0,1.585,101,1.732]],["body/interfaces/Activity.html",[0,1.515,2,2.018,3,0.274,4,0.274,5,0.237,7,0.274,8,1.4,9,3.869,10,1.87,14,0.717,15,3.869,16,1.325,17,0.031,19,0.433,29,2.789,33,0.014,34,0.02,35,0.014,101,2.289,207,2.829,251,2.265,252,3.447,253,3.11,254,3.447,255,3.447,256,3.11,257,3.11,258,3.13,259,2.516,260,2.516,261,2.516,262,2.516,263,2.516,264,2.516,265,2.596,266,1.82,267,1.82,268,2.516,269,2.516,270,2.516,271,2.516,272,2.516,273,2.516,274,2.516,275,2.516,276,2.516,277,2.516,278,2.516,279,2.516,280,3.588,281,2.289,282,2.516,283,2.516]],["title/modules/AppModule.html",[149,1.342,284,2.11]],["body/modules/AppModule.html",[3,0.291,4,0.291,5,0.253,17,0.031,19,0.291,20,0.923,33,0.015,34,0.02,35,0.015,74,0.77,86,0.853,105,0.042,123,1.851,149,2.099,150,3.441,151,1.614,152,1.614,153,1.939,154,1.939,155,1.614,156,1.939,157,1.939,160,2.627,161,1.483,162,1.939,164,2.412,165,1.764,169,2.912,248,3.036,281,1.764,284,4.066,285,2.765,286,2.765,287,3.441,288,3.13,289,3.3,290,3.3,291,2.765,292,4.471,293,3.3,294,2.412,295,2.412,296,3.3,297,2.412,298,2.412,299,3.3,300,3.3,301,2.765,302,3.3,303,3.3,304,3.3,305,3.3,306,3.3,307,3.3,308,3.3,309,1.939,310,3.3,311,2.412,312,3.3,313,3.3,314,3.3,315,2.765,316,3.3,317,2.149,318,3.3,319,3.3,320,2.412,321,2.765,322,3.3,323,3.3,324,3.3,325,3.3,326,3.3,327,3.3,328,3.3]],["title/controllers/AuthController.html",[36,1.585,329,2.11]],["body/controllers/AuthController.html",[3,0.233,4,0.233,5,0.202,7,0.233,10,0.932,11,1.151,14,0.509,16,1.104,17,0.031,19,0.233,20,1.257,24,1.582,27,1.461,33,0.012,34,0.017,35,0.012,36,1.29,38,1.29,40,1.929,42,1.461,43,2.809,51,1.709,53,0.971,55,1.999,56,1.999,57,4.111,58,1.999,74,0.689,75,1.929,76,1.929,77,1.929,81,2.64,84,2.043,85,1.929,86,0.682,87,1.929,88,1.29,93,1.41,94,1.718,95,1.929,104,1.929,105,0.034,106,1.718,107,2.794,108,1.86,109,2.245,110,1.29,112,1.929,113,1.999,114,1.717,115,1.718,116,1.869,118,1.718,122,1.41,123,1.092,125,1.29,127,1.55,140,1.718,141,1.718,161,1.185,242,1.41,315,2.211,317,2.489,329,2.489,330,2.211,331,3.202,332,3.202,333,3.202,334,3.202,335,3.202,336,2.638,337,2.638,338,2.638,339,2.638,340,2.638,341,2.638,342,2.638,343,2.638,344,2.638,345,2.211,346,3.822,347,2.638,348,2.211,349,2.914,350,3.822,351,2.638,352,2.198,353,1.929,354,1.55,355,1.718,356,2.245,357,2.638,358,2.638,359,2.638,360,2.638,361,2.638,362,2.638,363,2.638,364,2.638,365,2.638,366,2.638,367,2.638,368,2.638,369,2.638,370,2.638,371,2.638,372,2.638,373,2.794,374,1.718,375,1.718,376,1.718]],["title/modules/AuthModule.html",[149,1.342,287,1.904]],["body/modules/AuthModule.html",[3,0.312,4,0.312,5,0.27,17,0.031,19,0.312,33,0.016,34,0.021,35,0.016,38,2.287,74,0.782,86,0.913,88,1.726,105,0.045,149,2.172,151,1.726,152,1.726,153,2.074,154,2.074,155,1.726,156,3.082,157,2.074,160,2.748,161,1.586,162,2.074,169,3.046,287,3.769,288,3.191,301,2.957,329,3.416,352,2.92,353,2.58,377,2.957,378,3.53,379,2.957,380,3.508,381,3.508,382,3.53,383,3.53,384,2.58,385,4.677,386,3.53,387,3.53,388,3.53,389,3.53,390,3.53,391,3.53,392,2.957,393,3.53,394,2.957,395,3.53]],["title/injectables/AuthService.html",[172,1.145,352,1.585]],["body/injectables/AuthService.html",[3,0.234,4,0.144,5,0.125,7,0.144,10,1.353,11,1.121,14,0.558,16,1.153,17,0.031,19,0.144,20,1.612,24,1.961,27,1.72,33,0.007,34,0.012,35,0.007,42,1.011,43,2.697,53,0.916,55,1.885,56,1.885,58,1.81,74,0.624,81,2.249,84,1.413,86,0.422,105,0.021,108,2.409,109,2.249,110,2.713,113,1.81,114,2.128,115,2.493,116,2.316,118,2.493,122,2.046,123,1.585,125,2.056,138,2.249,147,2.435,161,1.497,172,0.934,173,0.873,175,1.553,193,1.194,195,2.435,196,2.169,201,2.798,228,2.798,242,1.413,248,0.873,294,1.194,295,1.194,309,0.96,317,2.169,320,1.194,321,2.215,331,2.791,332,2.215,333,2.215,334,2.215,335,2.791,345,2.215,348,2.215,349,2.247,352,1.293,354,0.96,355,1.722,373,2.798,374,1.064,375,1.064,384,1.194,394,1.369,396,1.369,397,2.644,398,2.644,399,1.634,400,2.2,401,4.736,402,4.736,403,1.634,404,2.644,405,1.634,406,2.644,407,1.634,408,2.644,409,1.634,410,1.634,411,2.644,412,1.634,413,1.634,414,2.644,415,1.634,416,3.207,417,1.634,418,1.369,419,1.634,420,1.064,421,1.194,422,1.634,423,2.644,424,1.634,425,2.791,426,2.791,427,3.331,428,1.369,429,2.644,430,1.634,431,4.204,432,1.634,433,1.064,434,1.634,435,1.634,436,1.634,437,1.634,438,1.634,439,2.644,440,1.634,441,2.644,442,2.644,443,2.644,444,2.644,445,2.644,446,3.828,447,1.634,448,2.644,449,1.634,450,2.644,451,2.644,452,2.644,453,2.644,454,2.644,455,2.644,456,1.634,457,2.644,458,2.644,459,3.331,460,1.634,461,1.634,462,2.215,463,1.634,464,3.828,465,2.644,466,1.634,467,1.634,468,1.634,469,1.634,470,1.634,471,1.634,472,1.634,473,1.634,474,1.634,475,1.634,476,1.634,477,1.634,478,1.634,479,1.634,480,1.634]],["title/classes/BadRequestFilter.html",[93,1.732,105,0.041]],["body/classes/BadRequestFilter.html",[3,0.346,4,0.346,5,0.3,7,0.346,11,0.861,14,0.443,17,0.03,19,0.346,33,0.018,34,0.023,35,0.018,42,1.912,53,0.727,55,1.496,56,1.496,58,1.496,74,0.495,84,2.092,86,1.012,93,2.673,94,3.257,105,0.05,108,1.62,113,2.107,114,1.758,116,1.914,311,4.03,433,3.59,481,1.279,482,3.279,483,4.191,484,4.619,485,4.191,486,5.81,487,4.868,488,3.913,489,3.279,490,3.913,491,3.279,492,3.279,493,3.913,494,3.913,495,3.913,496,3.913,497,3.913,498,3.913,499,3.913,500,3.279,501,3.913,502,3.913,503,3.913,504,3.913,505,3.913,506,3.279,507,3.913]],["title/classes/CreateAccountDTO.html",[105,0.041,508,1.904]],["body/classes/CreateAccountDTO.html",[3,0.339,4,0.339,5,0.294,7,0.339,8,1.614,11,1.202,12,3.209,13,3.209,14,0.704,16,1.237,17,0.03,18,3.209,19,0.339,33,0.018,34,0.023,35,0.018,51,1.885,53,1.071,74,0.625,105,0.063,354,3.506,481,1.254,508,2.902,509,2.804,510,2.804,511,3.214,512,3.214,513,3.836,514,2.051,515,3.836,516,3.214,517,3.836,518,2.254,519,3.209,520,2.591,521,2.051,522,2.902,523,2.64,524,1.466,525,3.214,526,2.804,527,2.804,528,2.804,529,2.804]],["title/classes/CreateActivityDTO.html",[50,1.904,105,0.041]],["body/classes/CreateActivityDTO.html",[1,2.059,3,0.281,4,0.281,5,0.243,7,0.281,8,1.424,14,0.702,16,1.255,17,0.03,19,0.281,33,0.015,34,0.02,35,0.015,50,2.56,51,1.938,53,1.101,74,0.629,102,2.56,105,0.056,207,2.658,252,3.238,253,2.921,254,3.238,255,3.238,256,2.921,257,2.921,259,1.867,260,1.867,261,1.867,262,1.867,263,1.867,264,1.867,266,1.867,267,1.867,268,1.867,269,1.867,270,1.867,271,1.867,272,1.867,273,1.867,274,1.867,275,1.867,276,1.867,277,1.867,278,1.867,279,1.867,281,1.698,282,1.867,283,1.867,481,1.039,510,2.323,512,2.662,514,1.698,519,3.293,520,2.713,521,2.329,522,2.56,523,2.658,524,1.214,530,5.059,531,2.323,532,3.177,533,3.177,534,4.357,535,2.662,536,2.662,537,3.177,538,2.662,539,2.662,540,3.177,541,2.56,542,2.662]],["title/classes/CreateUserDTO.html",[105,0.041,349,1.732]],["body/classes/CreateUserDTO.html",[3,0.31,4,0.31,5,0.269,7,0.31,8,1.524,14,0.675,16,1.278,17,0.03,19,0.31,22,3.074,23,3.074,24,2.166,25,3.074,26,3.074,27,2,28,3.074,30,1.877,32,1.877,33,0.016,34,0.021,35,0.016,51,1.949,53,1.107,74,0.589,105,0.06,349,2.491,354,3.574,481,1.148,510,3.407,516,2.942,518,2.063,519,3.503,520,2.679,521,1.877,524,1.342,541,2.739,543,2.287,544,3.512,545,3.512,546,2.942,547,3.512,548,2.942,549,3.512,550,3.512,551,2.942,552,3.512,553,3.905,554,2.942,555,2.942,556,2.942,557,3.512]],["title/classes/FetchActivitiesDTO.html",[64,1.904,105,0.041]],["body/classes/FetchActivitiesDTO.html",[1,2.099,3,0.291,4,0.291,5,0.253,7,0.291,8,1.461,14,0.713,16,1.285,17,0.03,19,0.291,33,0.015,34,0.02,35,0.015,51,1.991,53,1.131,64,2.627,74,0.565,102,1.939,105,0.057,197,4.248,198,3.707,199,4.248,200,4.248,207,2.71,253,2.979,256,2.979,257,2.979,481,1.079,514,3.036,520,2.691,522,2.979,523,3.3,524,1.261,541,2.627,558,5.174,559,2.765,560,3.3,561,3.3,562,3.3,563,3.3,564,3.3,565,3.268,566,3.3,567,3.3,568,3.3,569,3.3,570,3.3]],["title/injectables/JwtStrategy.html",[172,1.145,380,1.904]],["body/injectables/JwtStrategy.html",[3,0.36,4,0.36,5,0.312,7,0.36,11,0.897,14,0.462,17,0.031,19,0.36,33,0.019,34,0.023,35,0.019,42,1.962,43,2.525,53,0.953,55,1.558,56,1.558,58,1.558,74,0.711,86,1.054,88,1.994,105,0.052,113,1.558,172,1.814,173,2.179,175,3.301,309,2.395,380,3.016,392,3.415,462,4.301,571,3.415,572,4.301,573,4.076,574,5.133,575,4.076,576,4.076,577,3.415,578,2.98,579,3.415,580,3.415,581,3.415,582,3.415,583,3.415,584,4.076,585,4.076,586,4.076,587,4.076]],["title/injectables/LocalStrategy.html",[172,1.145,381,1.904]],["body/injectables/LocalStrategy.html",[3,0.314,4,0.314,5,0.272,7,0.314,10,1.257,11,1.035,14,0.532,16,1.211,17,0.031,19,0.314,20,1.315,24,1.946,27,1.797,33,0.016,34,0.021,35,0.016,42,1.797,43,2.366,53,0.873,55,1.797,56,1.797,58,1.36,74,0.737,86,0.92,88,1.74,105,0.045,106,2.317,108,2.18,110,1.74,113,1.36,138,2.762,172,1.661,173,1.901,175,2.09,193,2.6,196,2.317,201,3.437,242,1.901,317,3.648,352,2.927,353,2.6,374,2.317,375,2.317,381,2.762,572,3.939,577,2.98,578,2.6,580,2.98,581,2.98,582,2.98,583,2.98,588,2.98,589,3.557,590,3.557,591,4.701,592,3.557,593,2.98,594,3.557,595,3.557,596,3.557,597,4.701]],["title/classes/LoginUserDTO.html",[105,0.041,420,2.11]],["body/classes/LoginUserDTO.html",[3,0.379,4,0.379,5,0.329,7,0.379,8,1.733,14,0.6,16,1.216,17,0.03,19,0.379,24,2.382,27,2.199,33,0.02,34,0.024,35,0.02,51,1.733,53,0.985,74,0.543,105,0.068,420,3.453,421,4.205,481,1.404,519,3.38,520,2.585,524,1.641,543,2.796,546,3.597,551,3.597,553,4.442,554,3.597,556,3.597,598,4.294,599,3.597]],["title/classes/MongoFilter.html",[105,0.041,356,1.904]],["body/classes/MongoFilter.html",[3,0.346,4,0.346,5,0.3,7,0.346,11,0.861,14,0.443,17,0.03,19,0.346,20,1.095,33,0.018,34,0.023,35,0.018,42,1.912,53,0.727,55,1.496,56,1.496,58,1.496,74,0.633,86,1.012,105,0.05,108,1.62,113,1.912,114,2.247,116,2.446,125,1.914,311,4.03,356,2.939,433,3.59,481,1.279,483,4.191,484,4.619,485,4.191,487,4.868,489,3.279,491,4.191,492,3.279,600,3.279,601,5.81,602,3.913,603,3.913,604,3.913,605,3.913,606,3.913,607,3.913,608,3.913,609,3.913,610,3.913,611,3.913,612,3.913,613,3.913,614,3.279,615,3.913,616,3.913,617,3.913,618,3.913]],["title/classes/MongoIdDTO.html",[60,1.732,105,0.041]],["body/classes/MongoIdDTO.html",[3,0.403,4,0.403,5,0.35,7,0.403,8,1.799,10,2.088,14,0.517,16,1.114,17,0.03,19,0.403,33,0.021,34,0.025,35,0.021,51,1.492,53,0.848,60,2.942,74,0.577,105,0.07,481,1.492,519,3.234,524,1.745,619,4.024,620,3.825,621,4.566,622,4.566,623,5.505]],["title/classes/UpdateAccountDTO.html",[105,0.041,624,1.904]],["body/classes/UpdateAccountDTO.html",[3,0.339,4,0.339,5,0.294,7,0.339,8,1.614,11,1.202,12,3.209,13,3.209,14,0.704,16,1.237,17,0.03,18,3.209,19,0.339,33,0.018,34,0.023,35,0.018,51,1.885,53,1.071,74,0.625,105,0.063,481,1.254,509,2.804,511,3.214,514,2.64,518,2.254,520,2.591,521,2.051,522,2.902,523,3.189,524,1.466,525,3.214,526,2.804,527,2.804,528,2.804,529,2.804,565,2.804,624,2.902,625,4.362,626,3.836,627,3.836,628,3.214,629,3.836]],["title/classes/UpdateActivityDTO.html",[71,1.904,105,0.041]],["body/classes/UpdateActivityDTO.html",[1,2.069,3,0.283,4,0.283,5,0.246,7,0.283,8,1.433,14,0.703,16,1.257,17,0.03,19,0.283,33,0.015,34,0.02,35,0.015,51,1.943,53,1.104,71,2.576,74,0.555,102,1.884,105,0.056,207,2.671,252,3.254,253,2.936,254,3.254,255,3.254,256,2.936,257,2.936,259,1.884,260,1.884,261,1.884,262,1.884,263,1.884,264,1.884,266,1.884,267,1.884,268,1.884,269,1.884,270,1.884,271,1.884,272,1.884,273,1.884,274,1.884,275,1.884,276,1.884,277,1.884,278,1.884,279,1.884,281,1.714,282,1.884,283,1.884,481,1.048,514,2.671,520,2.671,521,2.344,522,2.576,523,3.235,524,1.226,531,2.344,535,2.687,536,2.687,538,2.687,539,2.687,541,2.576,542,2.687,565,2.344,628,2.687,630,5.07,631,3.207,632,3.207,633,3.207,634,3.207,635,3.207]],["title/classes/UpdateUserDTO.html",[105,0.041,636,1.904]],["body/classes/UpdateUserDTO.html",[3,0.34,4,0.34,5,0.295,7,0.34,8,1.617,14,0.654,16,1.237,17,0.03,19,0.34,22,3.213,23,3.213,25,3.213,26,3.213,28,3.213,30,2.056,32,2.056,33,0.018,34,0.023,35,0.018,51,1.887,53,1.072,74,0.626,105,0.063,481,1.258,514,2.644,518,2.26,520,2.594,521,2.056,523,3.267,524,1.471,541,2.907,543,2.505,548,3.223,555,3.223,599,3.223,625,4.366,636,2.907,637,3.847,638,3.847,639,3.847,640,3.847]],["title/interfaces/User.html",[0,1.585,20,0.907]],["body/interfaces/User.html",[0,2.19,1,1.369,2,2.154,3,0.292,4,0.292,5,0.253,6,2.154,7,0.292,8,1.464,9,4.156,10,2.009,11,0.728,12,1.943,13,1.943,14,0.714,15,4.156,16,1.358,17,0.03,18,2.631,19,0.481,20,1.253,21,3.196,22,3.196,23,3.196,24,2.252,25,3.196,26,3.196,27,2.08,28,3.196,29,2.916,30,2.908,31,3.543,32,2.908,33,0.015,34,0.02,35,0.015]],["title/controllers/UsersController.html",[36,1.585,641,2.11]],["body/controllers/UsersController.html",[3,0.132,4,0.132,5,0.278,7,0.132,10,2.088,11,0.884,14,0.412,16,0.874,17,0.031,19,0.132,20,1.423,21,1.447,27,1.199,33,0.007,34,0.011,35,0.007,36,0.733,38,0.733,40,1.095,42,0.942,43,2.507,51,1.313,53,0.746,55,1.535,56,1.535,57,4.079,58,1.535,60,2.44,72,1.255,74,0.673,75,1.095,76,2.657,77,1.095,79,2.064,80,1.255,81,3.127,82,1.604,83,1.255,84,2.44,85,1.095,86,0.387,87,1.095,88,0.733,91,0.975,93,0.801,95,1.095,99,1.095,100,1.604,104,1.095,105,0.019,106,0.975,107,2.936,108,2.203,109,3.127,110,1.964,112,1.801,113,1.745,114,2.538,115,2.616,116,2.763,118,2.616,122,2.718,123,2.158,124,0.975,125,2.549,126,1.255,127,0.88,137,1.255,140,2.813,141,2.813,142,1.255,143,1.255,144,1.255,145,2.629,147,1.095,148,2.064,161,0.673,224,1.255,242,1.317,248,0.801,297,1.095,298,1.095,309,0.88,355,0.975,356,1.447,373,2.657,374,1.604,375,1.604,376,1.604,400,1.534,416,3.365,425,3.045,426,3.045,508,2.682,619,1.095,624,2.682,636,2.682,641,1.604,642,1.255,643,1.498,644,2.629,645,2.629,646,2.629,647,2.629,648,2.629,649,1.255,650,1.498,651,1.498,652,1.498,653,4.138,654,1.498,655,1.498,656,1.498,657,1.498,658,1.255,659,1.498,660,1.498,661,1.498,662,1.498,663,1.498,664,2.064,665,1.498,666,1.498,667,1.498,668,1.255,669,2.463,670,1.498,671,1.498,672,1.498,673,2.463,674,2.463,675,1.498,676,3.635,677,4.017,678,1.498,679,1.498,680,1.498,681,1.498,682,1.498,683,1.498,684,1.498,685,1.498,686,1.498,687,3.137,688,2.463,689,1.498,690,1.498,691,1.498,692,1.498,693,1.498,694,1.498,695,1.498,696,2.463,697,1.498,698,2.463,699,1.498,700,1.498,701,1.498,702,1.498,703,1.498,704,1.498,705,3.137,706,1.498,707,3.137,708,3.137,709,1.498,710,1.498,711,2.463,712,1.498,713,1.498,714,1.498,715,1.498,716,1.498]],["title/modules/UsersModule.html",[149,1.342,288,1.732]],["body/modules/UsersModule.html",[3,0.349,4,0.349,5,0.302,11,0.869,17,0.03,19,0.349,20,1.104,33,0.018,34,0.023,35,0.018,38,2.46,74,0.761,86,1.021,105,0.05,149,2.292,151,1.93,152,1.93,153,2.319,154,2.319,155,1.93,156,3.252,157,3.252,160,2.955,161,1.773,162,2.319,164,2.885,165,2.11,169,2.57,170,3.307,171,2.885,288,3.343,400,3.188,641,3.605,668,3.307,717,3.307,718,3.307,719,3.307,720,3.947,721,3.677,722,3.947,723,3.947]],["title/injectables/UsersService.html",[172,1.145,400,1.585]],["body/injectables/UsersService.html",[1,0.741,3,0.158,4,0.158,5,0.218,7,0.158,10,1.902,11,1.185,14,0.595,16,1.234,17,0.031,19,0.158,20,1.427,21,1.051,24,1.67,27,1.353,33,0.008,34,0.013,35,0.008,42,1.087,43,2.814,53,1,55,2.058,56,2.058,58,2.008,74,0.664,81,1.051,82,1.853,84,1.52,86,0.463,91,1.853,100,1.853,105,0.023,108,1.94,110,2.687,113,2.1,114,1.278,116,1.391,122,1.52,123,2.034,124,1.166,125,1.731,127,1.671,131,2.383,138,1.671,140,1.166,141,1.166,165,0.957,172,1.005,173,0.957,175,1.051,177,3.379,191,1.308,192,1.499,195,1.308,196,1.166,198,1.308,214,1.499,218,1.499,223,1.308,228,2.588,242,2.505,248,2.156,349,2.353,355,1.853,376,1.166,400,1.391,428,1.499,433,1.166,500,1.499,506,1.499,508,2.586,518,1.051,624,2.753,636,2.996,644,2.383,645,2.383,646,2.383,647,2.966,648,2.383,649,2.383,653,4.117,658,1.499,664,2.383,724,1.499,725,2.845,726,2.845,727,2.845,728,1.79,729,1.79,730,2.845,731,2.845,732,1.79,733,2.845,734,1.79,735,1.79,736,2.845,737,1.79,738,2.845,739,1.79,740,2.845,741,1.79,742,2.845,743,1.79,744,1.79,745,2.845,746,1.79,747,2.383,748,1.79,749,2.845,750,1.79,751,1.79,752,1.79,753,2.845,754,1.79,755,1.79,756,1.79,757,1.79,758,1.79,759,1.79,760,1.79,761,1.79,762,1.79,763,2.845,764,1.79,765,1.79,766,2.845,767,2.845,768,1.79,769,1.79,770,1.79,771,4.034,772,2.845,773,2.845,774,1.79,775,1.79,776,1.79,777,1.79,778,1.79,779,1.79,780,1.79]],["title/coverage.html",[781,3.7]],["body/coverage.html",[0,2.411,1,1.294,5,0.239,6,2.806,14,0.354,17,0.03,20,0.875,33,0.014,34,0.02,35,0.014,36,2.411,37,2.036,39,2.62,50,1.837,60,1.671,64,1.837,71,1.837,89,1.671,93,1.671,94,2.036,101,1.671,105,0.08,123,1.294,155,1.529,167,2.286,172,1.969,174,2.62,223,4.839,251,2.286,329,2.036,330,2.62,349,1.671,352,1.529,354,2.532,356,1.837,380,1.837,381,1.837,396,2.62,400,1.529,420,2.036,421,2.286,482,2.62,508,1.837,509,3.15,530,2.62,531,3.15,543,3.211,558,2.62,559,2.62,571,2.62,588,2.62,600,2.62,619,2.286,620,2.62,624,1.837,625,3.15,630,2.62,636,1.837,641,2.036,642,2.62,721,2.286,724,2.62,781,2.62,782,3.127,783,3.127,784,3.127,785,4.931,786,4.309,787,3.127,788,2.62,789,4.931,790,5.314,791,4.931,792,4.309,793,4.931,794,4.931,795,2.62,796,3.127,797,4.931,798,4.309,799,3.61,800,2.62,801,3.127,802,3.127]],["title/dependencies.html",[152,1.905,803,2.71]],["body/dependencies.html",[17,0.031,33,0.019,34,0.024,35,0.019,86,1.06,88,2.006,105,0.066,152,2.006,165,2.192,190,3.436,191,2.998,291,3.436,294,2.998,295,2.998,297,2.998,298,2.998,384,2.998,418,3.436,524,1.567,578,4.119,579,3.436,593,3.436,747,3.436,804,4.101,805,5.634,806,4.101,807,4.101,808,5.153,809,4.101,810,4.101,811,4.101,812,4.101,813,4.101,814,4.101,815,4.101,816,4.101,817,4.101,818,4.101,819,4.101,820,4.101,821,4.101,822,4.101,823,4.101,824,4.101,825,4.101,826,4.101,827,4.101,828,4.101]],["title/miscellaneous/enumerations.html",[829,1.448,830,3.264]],["body/miscellaneous/enumerations.html",[6,2.219,7,0.301,17,0.031,18,2.684,26,2.684,30,2.943,31,3.586,32,2.943,33,0.016,34,0.021,35,0.016,251,2.49,256,2.684,257,2.684,258,3.339,259,2.684,260,2.684,261,2.684,262,2.684,263,2.684,264,2.684,265,2.854,266,2.002,267,2.002,268,2.684,269,2.684,270,2.684,271,2.684,272,2.684,273,2.684,274,2.684,275,2.684,276,2.684,277,2.684,278,2.684,279,2.684,280,3.827,281,2.441,282,2.684,283,2.684,829,1.821,830,2.854,831,4.568,832,4.568,833,5.612]],["title/miscellaneous/functions.html",[829,1.448,834,3.264]],["body/miscellaneous/functions.html",[7,0.446,17,0.027,33,0.023,34,0.027,35,0.023,155,3.016,795,4.235,829,2.702,834,4.235,835,5.055]],["title/index.html",[7,0.239,836,2.71,837,2.71]],["body/index.html",[17,0.027,33,0.024,34,0.027,35,0.024,320,3.765,838,5.15,839,5.15]],["title/modules.html",[151,2.16]],["body/modules.html",[17,0.026,33,0.022,34,0.026,35,0.022,150,2.834,151,2.359,284,3.141,287,2.834,288,2.578,840,6.248,841,6.248,842,6.248,843,6.248]],["title/overview.html",[844,3.7]],["body/overview.html",[2,2.52,17,0.03,33,0.018,34,0.023,35,0.018,38,1.892,89,2.931,149,1.602,150,3.515,151,1.892,152,1.892,153,2.273,154,2.273,155,1.892,156,2.273,157,2.273,158,3.242,159,3.242,160,2.917,161,1.738,162,2.273,173,2.068,284,4.107,285,3.242,286,3.242,287,3.798,288,3.328,352,2.682,377,3.242,379,3.242,380,3.222,381,3.222,400,3.045,481,1.265,717,3.242,718,3.242,719,3.242,844,3.242,845,3.869,846,4.966,847,3.869,848,3.869]],["title/miscellaneous/variables.html",[829,1.448,849,3.264]],["body/miscellaneous/variables.html",[1,1.576,7,0.232,11,0.577,12,1.541,13,1.541,14,0.73,16,1.245,17,0.031,20,0.734,21,1.541,22,1.541,23,1.541,24,1.086,25,1.541,27,1.003,28,1.541,29,3.2,30,1.402,31,1.708,32,2.034,33,0.012,34,0.017,35,0.012,123,1.854,167,2.782,171,3.274,207,2.394,227,2.198,248,3.447,252,1.708,253,1.541,254,1.708,255,1.708,258,1.918,259,1.541,260,1.541,261,1.541,262,1.541,263,1.541,264,1.541,266,1.541,267,1.541,268,1.541,269,1.541,270,1.541,271,1.541,272,1.541,273,1.541,274,1.541,275,1.541,276,1.541,277,1.541,278,1.541,279,1.541,281,1.402,282,1.541,283,1.541,309,2.631,376,1.708,526,1.918,527,1.918,528,1.918,529,1.918,614,4.559,721,2.782,788,2.198,799,2.198,800,3.752,829,1.402,833,3.752,849,2.198,850,3.806,851,2.623,852,3.806,853,5.953,854,2.623,855,4.479,856,4.479,857,4.479,858,5.441,859,4.479,860,2.623,861,3.806,862,3.806,863,3.806]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":223,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.7",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["0.23.4",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":790,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":787,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":793,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":794,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":797,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":785,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":786,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":791,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":792,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":224,"title":{},"body":{"injectables/ActivitiesService.html":{},"controllers/UsersController.html":{}}}],["1.0.0",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["1.1.3",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["1.9.1",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":218,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/UsersService.html":{}}}],["11",{"_index":848,"title":{},"body":{"overview.html":{}}}],["11000",{"_index":608,"title":{},"body":{"classes/MongoFilter.html":{}}}],["160].map(size",{"_index":757,"title":{},"body":{"injectables/UsersService.html":{}}}],["1h",{"_index":395,"title":{},"body":{"modules/AuthModule.html":{}}}],["2.24.0",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":115,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":130,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["240",{"_index":756,"title":{},"body":{"injectables/UsersService.html":{}}}],["2a$10$3z6jfxpxzhkq5buzfkahwoeyvcc3ohcwgeumy/rtphnragxigelig",{"_index":557,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["3",{"_index":846,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["30mins",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["4",{"_index":845,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":140,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["401",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["404",{"_index":124,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["409",{"_index":613,"title":{},"body":{"classes/MongoFilter.html":{}}}],["422",{"_index":495,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["5",{"_index":847,"title":{},"body":{"overview.html":{}}}],["5.8.2",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":618,"title":{},"body":{"classes/MongoFilter.html":{}}}],["5000000",{"_index":692,"title":{},"body":{"controllers/UsersController.html":{}}}],["587",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["6.1.1",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["6.1.2",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["640",{"_index":755,"title":{},"body":{"injectables/UsersService.html":{}}}],["640}.jpeg",{"_index":765,"title":{},"body":{"injectables/UsersService.html":{}}}],["__dirname",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["_id",{"_index":242,"title":{},"body":{"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["acc",{"_index":506,"title":{},"body":{"classes/BadRequestFilter.html":{},"injectables/UsersService.html":{}}}],["acc.id",{"_index":714,"title":{},"body":{"controllers/UsersController.html":{}}}],["acc.push",{"_index":501,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["acc[`accounts.$.${cur",{"_index":775,"title":{},"body":{"injectables/UsersService.html":{}}}],["account",{"_index":1,"title":{"interfaces/Account.html":{}},"body":{"interfaces/Account.html":{},"classes/CreateActivityDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateActivityDTO.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["account.dto",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["account.dto.ts",{"_index":509,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{},"coverage.html":{}}}],["account.dto.ts:10",{"_index":629,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["account.dto.ts:11",{"_index":511,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["account.dto.ts:12",{"_index":513,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:15",{"_index":517,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:16",{"_index":515,"title":{},"body":{"classes/CreateAccountDTO.html":{}}}],["account.dto.ts:5",{"_index":626,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["account.dto.ts:6",{"_index":627,"title":{},"body":{"classes/UpdateAccountDTO.html":{}}}],["accountid",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["accounts",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["accounts._id",{"_index":777,"title":{},"body":{"injectables/UsersService.html":{}}}],["accountschema",{"_index":800,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["accounttypeenum",{"_index":18,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["action",{"_index":707,"title":{},"body":{"controllers/UsersController.html":{}}}],["activities",{"_index":41,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["activities.controller",{"_index":166,"title":{},"body":{"modules/ActivitiesModule.html":{}}}],["activities.dto",{"_index":97,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["activities.dto.ts",{"_index":559,"title":{},"body":{"classes/FetchActivitiesDTO.html":{},"coverage.html":{}}}],["activities.dto.ts:11",{"_index":566,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["activities.dto.ts:12",{"_index":568,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["activities.dto.ts:13",{"_index":567,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["activities.dto.ts:14",{"_index":560,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["activities.dto.ts:15",{"_index":561,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["activities.dto.ts:16",{"_index":563,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["activities.dto.ts:17",{"_index":569,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["activities.dto.ts:18",{"_index":564,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["activities.service",{"_index":90,"title":{},"body":{"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{}}}],["activities/activities.module",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["activitiescontroller",{"_index":37,"title":{"controllers/ActivitiesController.html":{}},"body":{"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"coverage.html":{}}}],["activitiesmodule",{"_index":150,"title":{"modules/ActivitiesModule.html":{}},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["activitiesservice",{"_index":89,"title":{"injectables/ActivitiesService.html":{}},"body":{"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"coverage.html":{},"overview.html":{}}}],["activity",{"_index":101,"title":{"interfaces/Activity.html":{}},"body":{"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"coverage.html":{}}}],["activity.dto",{"_index":92,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["activity.dto.ts",{"_index":531,"title":{},"body":{"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"coverage.html":{}}}],["activity.dto.ts:11",{"_index":633,"title":{},"body":{"classes/UpdateActivityDTO.html":{}}}],["activity.dto.ts:12",{"_index":632,"title":{},"body":{"classes/UpdateActivityDTO.html":{}}}],["activity.dto.ts:13",{"_index":539,"title":{},"body":{"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{}}}],["activity.dto.ts:14",{"_index":538,"title":{},"body":{"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{}}}],["activity.dto.ts:15",{"_index":533,"title":{},"body":{"classes/CreateActivityDTO.html":{}}}],["activity.dto.ts:16",{"_index":532,"title":{},"body":{"classes/CreateActivityDTO.html":{}}}],["activity.dto.ts:19",{"_index":635,"title":{},"body":{"classes/UpdateActivityDTO.html":{}}}],["activity.dto.ts:20",{"_index":540,"title":{},"body":{"classes/CreateActivityDTO.html":{}}}],["activity.dto.ts:45",{"_index":631,"title":{},"body":{"classes/UpdateActivityDTO.html":{}}}],["activity.dto.ts:46",{"_index":535,"title":{},"body":{"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{}}}],["activity.dto.ts:47",{"_index":537,"title":{},"body":{"classes/CreateActivityDTO.html":{}}}],["activity.model",{"_index":102,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"classes/CreateActivityDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateActivityDTO.html":{}}}],["activity.schema",{"_index":168,"title":{},"body":{"modules/ActivitiesModule.html":{}}}],["activitymodel",{"_index":179,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["activityschema",{"_index":167,"title":{},"body":{"modules/ActivitiesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["acttypeenum",{"_index":257,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{}}}],["adapter",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["address",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["already",{"_index":611,"title":{},"body":{"classes/MongoFilter.html":{}}}],["amount",{"_index":252,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/variables.html":{}}}],["api",{"_index":839,"title":{},"body":{"index.html":{}}}],["app",{"_index":838,"title":{},"body":{"index.html":{}}}],["appended",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["appmodule",{"_index":284,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentshost",{"_index":487,"title":{},"body":{"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{}}}],["array.isarray(exception.message.message",{"_index":493,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["async",{"_index":43,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{}}}],["auth.controller",{"_index":388,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":329,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":87,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":287,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorized",{"_index":678,"title":{},"body":{"controllers/UsersController.html":{}}}],["authservice",{"_index":352,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["automobile",{"_index":260,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["avatar",{"_index":21,"title":{},"body":{"interfaces/Account.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["await",{"_index":110,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["bad",{"_index":141,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":84,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestfilter",{"_index":93,"title":{"classes/BadRequestFilter.html":{}},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"classes/BadRequestFilter.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["bank",{"_index":527,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["body",{"_index":76,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":155,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":843,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":840,"title":{},"body":{"modules.html":{}}}],["card",{"_index":529,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["case",{"_index":607,"title":{},"body":{"classes/MongoFilter.html":{}}}],["catch",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{},"injectables/UsersService.html":{}}}],["catch(badrequestexception",{"_index":490,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["catch(exception",{"_index":485,"title":{},"body":{"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{}}}],["catch(mongoerror",{"_index":604,"title":{},"body":{"classes/MongoFilter.html":{}}}],["category",{"_index":253,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/variables.html":{}}}],["categoryenum",{"_index":256,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{}}}],["cb",{"_index":687,"title":{},"body":{"controllers/UsersController.html":{}}}],["cb(null",{"_index":688,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":725,"title":{},"body":{"injectables/UsersService.html":{}}}],["changepassword(password",{"_index":731,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":105,"title":{"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{}},"body":{"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":481,"title":{},"body":{"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"overview.html":{}}}],["clothing",{"_index":279,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["cluster_activitiesmodule",{"_index":158,"title":{},"body":{"modules/ActivitiesModule.html":{},"overview.html":{}}}],["cluster_activitiesmodule_providers",{"_index":159,"title":{},"body":{"modules/ActivitiesModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":377,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":378,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":379,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":717,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":718,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":719,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["completed",{"_index":708,"title":{},"body":{"controllers/UsersController.html":{}}}],["configmodule",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":108,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"injectables/LocalStrategy.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":175,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel('user",{"_index":748,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(activitymodel",{"_index":176,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["constructor(authservice",{"_index":589,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(private",{"_index":106,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(usermodel",{"_index":728,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":36,"title":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('activities",{"_index":103,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["controller('auth",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":675,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":38,"title":{},"body":{"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["count",{"_index":239,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["coverage",{"_index":781,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":131,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/UsersService.html":{}}}],["create(createuserdto",{"_index":733,"title":{},"body":{"injectables/UsersService.html":{}}}],["createaccount",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createaccount(createaccountdto",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createaccountdto",{"_index":508,"title":{"classes/CreateAccountDTO.html":{}},"body":{"classes/CreateAccountDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createactivity",{"_index":44,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["createactivity(createactivitydto",{"_index":180,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["createactivity(req",{"_index":49,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["createactivitydto",{"_index":50,"title":{"classes/CreateActivityDTO.html":{}},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"classes/CreateActivityDTO.html":{},"coverage.html":{}}}],["createactivitydto.date",{"_index":244,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["createdactivity",{"_index":243,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["createdactivity.save",{"_index":246,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["createdat",{"_index":9,"title":{},"body":{"interfaces/Account.html":{},"interfaces/Activity.html":{},"interfaces/User.html":{}}}],["createduser",{"_index":750,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":752,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":349,"title":{"classes/CreateUserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.password",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["credit",{"_index":528,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["cur",{"_index":500,"title":{},"body":{"classes/BadRequestFilter.html":{},"injectables/UsersService.html":{}}}],["cur.property",{"_index":503,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["customer@somemailbox.com",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":109,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["data.accounts.find(acc",{"_index":713,"title":{},"body":{"controllers/UsersController.html":{}}}],["data.accounts[data.accounts.length",{"_index":709,"title":{},"body":{"controllers/UsersController.html":{}}}],["data.length",{"_index":240,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["date",{"_index":207,"title":{},"body":{"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/variables.html":{}}}],["date().tojson",{"_index":245,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["datetype",{"_index":200,"title":{},"body":{"injectables/ActivitiesService.html":{},"classes/FetchActivitiesDTO.html":{}}}],["day",{"_index":204,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["declarations",{"_index":154,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":51,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/LoginUserDTO.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":614,"title":{},"body":{"classes/MongoFilter.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["defined",{"_index":53,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":80,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["delete('/:id",{"_index":132,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["delete('/:id/accounts/:accountid",{"_index":715,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteaccount",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteaccount(req",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteaccount(user",{"_index":736,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteactivity",{"_index":45,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["deleteactivity(@request",{"_index":133,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["deleteactivity(mongoiddto",{"_index":182,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["deleteactivity(req",{"_index":59,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["deleted",{"_index":135,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["deleted.deletedcount",{"_index":250,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["dependencies",{"_index":152,"title":{"dependencies.html":{}},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":254,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/variables.html":{}}}],["destination",{"_index":684,"title":{},"body":{"controllers/UsersController.html":{}}}],["digital",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dir",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["diskstorage",{"_index":669,"title":{},"body":{"controllers/UsersController.html":{}}}],["dob",{"_index":28,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":782,"title":{},"body":{"coverage.html":{}}}],["drinks",{"_index":267,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["dto/create",{"_index":91,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/fetch",{"_index":96,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["dto/mongo",{"_index":98,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["dto/update",{"_index":100,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["edituser",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["edituser(id",{"_index":738,"title":{},"body":{"injectables/UsersService.html":{}}}],["edituser(updateuserdto",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["education",{"_index":268,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":24,"title":{},"body":{"interfaces/Account.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["endof((datetype",{"_index":212,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["entertainment",{"_index":269,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":497,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["enum",{"_index":29,"title":{},"body":{"interfaces/Account.html":{},"interfaces/Activity.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["enumerations",{"_index":830,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":125,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["errors",{"_index":498,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["exceeded",{"_index":769,"title":{},"body":{"injectables/UsersService.html":{}}}],["exception",{"_index":489,"title":{},"body":{"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{}}}],["exception.code",{"_index":606,"title":{},"body":{"classes/MongoFilter.html":{}}}],["exception.keyvalue.email",{"_index":610,"title":{},"body":{"classes/MongoFilter.html":{}}}],["exception.message.message.reduce((acc",{"_index":499,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["exceptionfilter",{"_index":484,"title":{},"body":{"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{}}}],["exceptions/bad",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{}}}],["exceptions/mongo.filters",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["exec",{"_index":234,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["exist",{"_index":148,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["exists",{"_index":612,"title":{},"body":{"classes/MongoFilter.html":{}}}],["expenditure",{"_index":258,"title":{},"body":{"interfaces/Activity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":394,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":157,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["ext",{"_index":696,"title":{},"body":{"controllers/UsersController.html":{}}}],["extends",{"_index":581,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["extension",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["extname",{"_index":671,"title":{},"body":{"controllers/UsersController.html":{}}}],["extractjwt",{"_index":576,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":585,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["female",{"_index":31,"title":{},"body":{"interfaces/Account.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":117,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["fetchactivitiesdto",{"_index":64,"title":{"classes/FetchActivitiesDTO.html":{}},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"classes/FetchActivitiesDTO.html":{},"coverage.html":{}}}],["fetchactivitiesdto.size",{"_index":216,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filefilter(req",{"_index":693,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileinterceptor",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileinterceptor('avatar",{"_index":682,"title":{},"body":{"controllers/UsersController.html":{}}}],["filename",{"_index":686,"title":{},"body":{"controllers/UsersController.html":{}}}],["filesize",{"_index":691,"title":{},"body":{"controllers/UsersController.html":{}}}],["filetypes",{"_index":694,"title":{},"body":{"controllers/UsersController.html":{}}}],["filetypes.test(extname(file.originalname).tolowercase",{"_index":697,"title":{},"body":{"controllers/UsersController.html":{}}}],["filetypes.test(file.mimetype",{"_index":699,"title":{},"body":{"controllers/UsersController.html":{}}}],["find(searchobj",{"_index":230,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["findactivities",{"_index":46,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["findactivities(fetchactivitiesdto",{"_index":184,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["findactivities(req",{"_index":63,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["findactivity",{"_index":47,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["findactivity(@request",{"_index":120,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["findactivity(mongoiddto",{"_index":186,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["findactivity(req",{"_index":67,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["findone",{"_index":726,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(email",{"_index":740,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduser",{"_index":727,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduser(email",{"_index":742,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":22,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["fitness",{"_index":274,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["flavie.walsh@ethereal.email",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["food",{"_index":266,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["fooddrinks",{"_index":265,"title":{},"body":{"interfaces/Activity.html":{},"miscellaneous/enumerations.html":{}}}],["found",{"_index":127,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["founduser",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser._doc",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["founduser._doc._id",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":796,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":834,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furniture",{"_index":270,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["gadget",{"_index":271,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["gender",{"_index":25,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["genderenum",{"_index":26,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["get('/:id",{"_index":119,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["get('/profile",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{}}}],["getters",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":836,"title":{"index.html":{}},"body":{}}],["gift",{"_index":272,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["groceries",{"_index":273,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["gte",{"_index":208,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["handlebarsadapter",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["hbs",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["host",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{}}}],["host.switchtohttp().getresponse",{"_index":492,"title":{},"body":{"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{}}}],["housing",{"_index":278,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["httpexception",{"_index":486,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["id",{"_index":10,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/MongoIdDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id.dto",{"_index":99,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/UsersController.html":{}}}],["id.dto.ts",{"_index":620,"title":{},"body":{"classes/MongoIdDTO.html":{},"coverage.html":{}}}],["id.dto.ts:4",{"_index":622,"title":{},"body":{"classes/MongoIdDTO.html":{}}}],["identifier",{"_index":783,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":586,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":483,"title":{},"body":{"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{}}}],["import",{"_index":74,"title":{},"body":{"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":169,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":172,"title":{"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":173,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":192,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/UsersService.html":{}}}],["injectmodel('activity",{"_index":194,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Account.html":{},"interfaces/Activity.html":{},"interfaces/User.html":{}},"body":{"interfaces/Account.html":{},"interfaces/Activity.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Account.html":{},"interfaces/Activity.html":{},"interfaces/User.html":{},"overview.html":{}}}],["internal",{"_index":617,"title":{},"body":{"classes/MongoFilter.html":{}}}],["invalid",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["investment",{"_index":263,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":553,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{}}}],["isglobal",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":521,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isin(['digital",{"_index":525,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{}}}],["isin(['expenditure",{"_index":542,"title":{},"body":{"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{}}}],["isin(['female",{"_index":555,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isiso8601",{"_index":541,"title":{},"body":{"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["ismatch",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["ismongoid",{"_index":623,"title":{},"body":{"classes/MongoIdDTO.html":{}}}],["ismongoid()@isnotempty",{"_index":621,"title":{},"body":{"classes/MongoIdDTO.html":{}}}],["isnan(pagenumber",{"_index":222,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["isnotempty",{"_index":519,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/MongoIdDTO.html":{}}}],["isnotempty()@isiso8601",{"_index":544,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isnotempty()@isnumberstring",{"_index":512,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{}}}],["isnotempty()@isstring",{"_index":510,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{}}}],["isnotempty()@isstring()@isemail",{"_index":546,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{}}}],["isnotempty()@isstring()@length(6",{"_index":551,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{}}}],["isnumberstring",{"_index":522,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{}}}],["isoptional",{"_index":523,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isoptional()@isiso8601",{"_index":637,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["isoptional()@isiso8601()@isstring",{"_index":562,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["isoptional()@isnumberstring",{"_index":565,"title":{},"body":{"classes/FetchActivitiesDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{}}}],["isoptional()@isstring",{"_index":514,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isoptional()@isstring()@isin(undefined",{"_index":634,"title":{},"body":{"classes/UpdateActivityDTO.html":{}}}],["isoptional()@isstring()@isiso8601",{"_index":536,"title":{},"body":{"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{}}}],["isoptional()@isstring()@isoptional()@isin(undefined",{"_index":638,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["ispositive",{"_index":570,"title":{},"body":{"classes/FetchActivitiesDTO.html":{}}}],["isstring",{"_index":520,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["isstring()@isin(undefined",{"_index":516,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateUserDTO.html":{}}}],["isstring()@isnotempty()@isin(undefined",{"_index":534,"title":{},"body":{"classes/CreateActivityDTO.html":{}}}],["isstring()@isoptional()@isin(undefined",{"_index":628,"title":{},"body":{"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{}}}],["jpeg|jpg|png",{"_index":695,"title":{},"body":{"controllers/UsersController.html":{}}}],["json",{"_index":616,"title":{},"body":{"classes/MongoFilter.html":{}}}],["jwt",{"_index":579,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":387,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":584,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":383,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":389,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":380,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["lastname",{"_index":23,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":153,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":554,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{}}}],["length(6",{"_index":556,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{}}}],["limit",{"_index":214,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/UsersService.html":{}}}],["limit(limit",{"_index":231,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["limits",{"_index":690,"title":{},"body":{"controllers/UsersController.html":{}}}],["line",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["list",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["loan",{"_index":275,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["local",{"_index":593,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":386,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":381,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindetails",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindetails.data.token",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":420,"title":{"classes/LoginUserDTO.html":{}},"body":{"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"coverage.html":{}}}],["lte",{"_index":210,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["mailermodule",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule.forroot",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["mailerservice",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["male",{"_index":30,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":34,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["medical",{"_index":276,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":116,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["messages",{"_index":504,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["meta",{"_index":237,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["metadata",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":42,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mime",{"_index":698,"title":{},"body":{"controllers/UsersController.html":{}}}],["minutes",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["misc",{"_index":277,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":829,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":705,"title":{},"body":{"controllers/UsersController.html":{}}}],["model",{"_index":177,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":149,"title":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":151,"title":{"modules.html":{}},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["moment",{"_index":190,"title":{},"body":{"injectables/ActivitiesService.html":{},"dependencies.html":{}}}],["moment(rest.date).startof((datetype",{"_index":203,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["moment(setdate",{"_index":211,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["mongodb",{"_index":603,"title":{},"body":{"classes/MongoFilter.html":{}}}],["mongoerror",{"_index":601,"title":{},"body":{"classes/MongoFilter.html":{}}}],["mongofilter",{"_index":356,"title":{"classes/MongoFilter.html":{}},"body":{"controllers/AuthController.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["mongoiddto",{"_index":60,"title":{"classes/MongoIdDTO.html":{}},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"classes/MongoIdDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["mongoiddto.id",{"_index":126,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["mongoose",{"_index":191,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":164,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":170,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(process.env.database_url",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["morgan",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["mspttrnzsduthc2xnk",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["multer",{"_index":670,"title":{},"body":{"controllers/UsersController.html":{}}}],["multermodule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":11,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoFilter.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":86,"title":{},"body":{"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":384,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":165,"title":{},"body":{"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":88,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":123,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["noreply@xpenz.com",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception",{"_index":82,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["obj",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["object.keys(updateaccountdto).reduce((acc",{"_index":774,"title":{},"body":{"injectables/UsersService.html":{}}}],["object.values(cur.constraints",{"_index":505,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["object.values(updateactivitydto).length",{"_index":139,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["object.values(updateuserdto).length",{"_index":679,"title":{},"body":{"controllers/UsersController.html":{}}}],["one",{"_index":143,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["onj",{"_index":597,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["optional",{"_index":56,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["out",{"_index":162,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":844,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":227,"title":{},"body":{"injectables/ActivitiesService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":803,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":199,"title":{},"body":{"injectables/ActivitiesService.html":{},"classes/FetchActivitiesDTO.html":{}}}],["pagenumber",{"_index":219,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["pagesize",{"_index":238,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["param",{"_index":79,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["param('accountid",{"_index":711,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":676,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameter",{"_index":144,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":55,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseint",{"_index":215,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["parseint(page",{"_index":220,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["pass",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["passport",{"_index":578,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":385,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":580,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":582,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"interfaces/Account.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":595,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["passwordhash",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordreset",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["passwordreset(@body('password",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordreset(pass",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordreset(password",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordresettoken",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":83,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":137,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id/accounts/:accountid",{"_index":710,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":672,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["port",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":75,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('/:id/accounts",{"_index":704,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/:id/avatar",{"_index":681,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/login",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('passwordreset",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('requestpasswordreset",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":40,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":195,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret",{"_index":392,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.mailtemplates_dir}/password",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.mailtemplates_dir}/welcome",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.page",{"_index":221,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["process.env.page_size",{"_index":217,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["profile",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["profile(@request",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile(req",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile(user",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{}}}],["promise",{"_index":138,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":754,"title":{},"body":{"injectables/UsersService.html":{}}}],["properties",{"_index":8,"title":{},"body":{"interfaces/Account.html":{},"interfaces/Activity.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/LoginUserDTO.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{}}}],["property",{"_index":502,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["provide",{"_index":142,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["provided",{"_index":147,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["providers",{"_index":156,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["pug",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["pugadapter",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["query",{"_index":78,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["readonly",{"_index":196,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["receivers",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["ref",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["req",{"_index":57,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req.file.path",{"_index":703,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user",{"_index":112,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":677,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user.id}${extname(file.originalname",{"_index":689,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":81,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["request.filters",{"_index":95,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["request.filters.ts",{"_index":482,"title":{},"body":{"classes/BadRequestFilter.html":{},"coverage.html":{}}}],["request.filters.ts:11",{"_index":488,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["requested",{"_index":780,"title":{},"body":{"injectables/UsersService.html":{}}}],["requestpasswordreset",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["requestpasswordreset(@body('email",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestpasswordreset(email",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["required",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":161,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resettoken",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["resize(size",{"_index":759,"title":{},"body":{"injectables/UsersService.html":{}}}],["response",{"_index":491,"title":{},"body":{"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{}}}],["response.status(400).json(exception.getresponse",{"_index":507,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["response.status(409).json",{"_index":609,"title":{},"body":{"classes/MongoFilter.html":{}}}],["response.status(422).json",{"_index":494,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["rest",{"_index":201,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["rest.date",{"_index":206,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["restdate",{"_index":205,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["result",{"_index":33,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":35,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":113,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":58,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["revenue",{"_index":259,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rimraf",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["rxjs",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["salary",{"_index":261,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["salt",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["saltpassword",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["saltpassword(password",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["savings",{"_index":262,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["schema",{"_index":171,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schema.objectid",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema.types.decimal128",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":197,"title":{},"body":{"injectables/ActivitiesService.html":{},"classes/FetchActivitiesDTO.html":{}}}],["searchobj",{"_index":225,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["secret",{"_index":391,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":587,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sender",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["set",{"_index":778,"title":{},"body":{"injectables/UsersService.html":{}}}],["setdate",{"_index":202,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["setdate.todate",{"_index":209,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["setobj",{"_index":773,"title":{},"body":{"injectables/UsersService.html":{}}}],["sharp",{"_index":747,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["sharp(file",{"_index":758,"title":{},"body":{"injectables/UsersService.html":{}}}],["shopping",{"_index":264,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["signoptions",{"_index":393,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(createuserdto",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["size",{"_index":198,"title":{},"body":{"injectables/ActivitiesService.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/UsersService.html":{}}}],["size}.jpeg",{"_index":762,"title":{},"body":{"injectables/UsersService.html":{}}}],["skip(skip",{"_index":232,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["smtp.ethereal.email",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["sort",{"_index":233,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"modules/ActivitiesModule.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../activity.model.ts",{"_index":832,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../activity.schema.ts",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":835,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../user.model.ts",{"_index":831,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.schema.ts",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/activities/activities.controller.ts",{"_index":39,"title":{},"body":{"controllers/ActivitiesController.html":{},"coverage.html":{}}}],["src/activities/activities.controller.ts:33",{"_index":66,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["src/activities/activities.controller.ts:49",{"_index":69,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["src/activities/activities.controller.ts:69",{"_index":54,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["src/activities/activities.controller.ts:86",{"_index":62,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["src/activities/activities.controller.ts:99",{"_index":73,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["src/activities/activities.module.ts",{"_index":163,"title":{},"body":{"modules/ActivitiesModule.html":{}}}],["src/activities/activities.service.ts",{"_index":174,"title":{},"body":{"injectables/ActivitiesService.html":{},"coverage.html":{}}}],["src/activities/activities.service.ts:13",{"_index":178,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["src/activities/activities.service.ts:18",{"_index":185,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["src/activities/activities.service.ts:66",{"_index":187,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["src/activities/activities.service.ts:71",{"_index":181,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["src/activities/activities.service.ts:83",{"_index":189,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["src/activities/activities.service.ts:97",{"_index":183,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["src/activities/activity.model.ts",{"_index":251,"title":{},"body":{"interfaces/Activity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/activities/activity.schema.ts",{"_index":788,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/activities/dto/create",{"_index":530,"title":{},"body":{"classes/CreateActivityDTO.html":{},"coverage.html":{}}}],["src/activities/dto/fetch",{"_index":558,"title":{},"body":{"classes/FetchActivitiesDTO.html":{},"coverage.html":{}}}],["src/activities/dto/mongo",{"_index":619,"title":{},"body":{"classes/MongoIdDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/activities/dto/update",{"_index":630,"title":{},"body":{"classes/UpdateActivityDTO.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:35",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:46",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":382,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:101",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:113",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:122",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:70",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":571,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:15",{"_index":575,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:6",{"_index":573,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":588,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:16",{"_index":592,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:8",{"_index":590,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/exceptions/bad",{"_index":94,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"classes/BadRequestFilter.html":{},"coverage.html":{}}}],["src/exceptions/mongo.filters",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/exceptions/mongo.filters.ts",{"_index":600,"title":{},"body":{"classes/MongoFilter.html":{},"coverage.html":{}}}],["src/exceptions/mongo.filters.ts:5",{"_index":602,"title":{},"body":{"classes/MongoFilter.html":{}}}],["src/main.ts",{"_index":795,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":625,"title":{},"body":{"classes/UpdateAccountDTO.html":{},"classes/UpdateUserDTO.html":{},"coverage.html":{}}}],["src/users/user.model",{"_index":193,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["src/users/user.model.ts",{"_index":6,"title":{},"body":{"interfaces/Account.html":{},"interfaces/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/user.schema.ts",{"_index":799,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.controller.ts",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:108",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:138",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:173",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:210",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:37",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":720,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":724,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:100",{"_index":737,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":729,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:17",{"_index":741,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":743,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:25",{"_index":734,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:30",{"_index":739,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":746,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:53",{"_index":732,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":735,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:78",{"_index":744,"title":{},"body":{"injectables/UsersService.html":{}}}],["started",{"_index":837,"title":{"index.html":{}},"body":{}}],["starteramount",{"_index":12,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["statements",{"_index":784,"title":{},"body":{"coverage.html":{}}}],["status(500",{"_index":615,"title":{},"body":{"classes/MongoFilter.html":{}}}],["statuscode",{"_index":114,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/MongoFilter.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["storage",{"_index":683,"title":{},"body":{"controllers/UsersController.html":{}}}],["strategy",{"_index":577,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strict",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["string",{"_index":16,"title":{},"body":{"interfaces/Account.html":{},"interfaces/Activity.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":128,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["successful",{"_index":118,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":136,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["super",{"_index":583,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":841,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":842,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":605,"title":{},"body":{"classes/MongoFilter.html":{}}}],["table",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":801,"title":{},"body":{"coverage.html":{}}}],["tax",{"_index":280,"title":{},"body":{"interfaces/Activity.html":{},"miscellaneous/enumerations.html":{}}}],["template",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["templates",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["text",{"_index":226,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["theme",{"_index":13,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["theone",{"_index":766,"title":{},"body":{"injectables/UsersService.html":{}}}],["theone.accounts.id(accountid).remove",{"_index":779,"title":{},"body":{"injectables/UsersService.html":{}}}],["theone.accounts.length",{"_index":768,"title":{},"body":{"injectables/UsersService.html":{}}}],["theone.accounts.push(createaccountdto",{"_index":770,"title":{},"body":{"injectables/UsersService.html":{}}}],["theone.save",{"_index":772,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.activitiesservice.createactivity",{"_index":129,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["this.activitiesservice.deleteactivity",{"_index":134,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["this.activitiesservice.findactivities",{"_index":111,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["this.activitiesservice.findactivity",{"_index":121,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["this.activitiesservice.updateactivity",{"_index":146,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["this.activitymodel",{"_index":229,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["this.activitymodel.countdocuments(searchobj",{"_index":236,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["this.activitymodel.deleteone",{"_index":249,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["this.activitymodel.findone",{"_index":241,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["this.activitymodel.findoneandupdate",{"_index":247,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["this.authservice.login(req.user",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.passwordreset(pass",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.profile(req.user",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.requestpasswordreset(email",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":596,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.jwtservice.sign(payload",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.login(user",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailerservice.sendmail",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltpassword(createuserdto.password",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltpassword(password",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel(createuserdto",{"_index":751,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid",{"_index":767,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate",{"_index":763,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":749,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findoneandupdate",{"_index":753,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.changepassword(passwordhash",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.createaccount",{"_index":706,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteaccount(req.user",{"_index":716,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edituser(id",{"_index":680,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(email",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduser(email",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduser(user.email",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateaccount",{"_index":712,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.uploadavatar",{"_index":702,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":122,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":255,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/variables.html":{}}}],["todate",{"_index":213,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["tofile(`./uploads/avatars/${id",{"_index":761,"title":{},"body":{"injectables/UsersService.html":{}}}],["toformat('jpeg",{"_index":760,"title":{},"body":{"injectables/UsersService.html":{}}}],["tojson",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["toobject",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["total",{"_index":235,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["transformer",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["transport",{"_index":281,"title":{},"body":{"interfaces/Activity.html":{},"modules/AppModule.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["travel",{"_index":282,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["true",{"_index":248,"title":{},"body":{"injectables/ActivitiesService.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["type",{"_index":14,"title":{},"body":{"interfaces/Account.html":{},"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"interfaces/Activity.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BadRequestFilter.html":{},"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDTO.html":{},"classes/MongoFilter.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["unique",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unprocessable",{"_index":496,"title":{},"body":{"classes/BadRequestFilter.html":{}}}],["unspecified",{"_index":32,"title":{},"body":{"interfaces/Account.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["unsupported",{"_index":700,"title":{},"body":{"controllers/UsersController.html":{}}}],["update",{"_index":145,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["updateaccount",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateaccount(updateaccountdto",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateaccountdto",{"_index":624,"title":{"classes/UpdateAccountDTO.html":{}},"body":{"classes/UpdateAccountDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateaccountdto[cur",{"_index":776,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateactivity",{"_index":48,"title":{},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{}}}],["updateactivity(mongoiddto",{"_index":188,"title":{},"body":{"injectables/ActivitiesService.html":{}}}],["updateactivity(req",{"_index":70,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["updateactivitydto",{"_index":71,"title":{"classes/UpdateActivityDTO.html":{}},"body":{"controllers/ActivitiesController.html":{},"injectables/ActivitiesService.html":{},"classes/UpdateActivityDTO.html":{},"coverage.html":{}}}],["updated",{"_index":771,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":15,"title":{},"body":{"interfaces/Account.html":{},"interfaces/Activity.html":{},"interfaces/User.html":{}}}],["updateuserdto",{"_index":636,"title":{"classes/UpdateUserDTO.html":{}},"body":{"classes/UpdateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["uploadavatar",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["uploadavatar(avatar",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadavatar(file",{"_index":745,"title":{},"body":{"injectables/UsersService.html":{}}}],["uploaded",{"_index":701,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":674,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploads/avatars/${id",{"_index":764,"title":{},"body":{"injectables/UsersService.html":{}}}],["uploads/avatars/tmp",{"_index":685,"title":{},"body":{"controllers/UsersController.html":{}}}],["usecreateindex",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":390,"title":{},"body":{"modules/AuthModule.html":{}}}],["usefilters",{"_index":77,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["usefilters(badrequestfilter",{"_index":104,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["usefindandmodify",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":85,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('jwt",{"_index":107,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@delete('/:id",{"_index":61,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["useguards(undefined)@delete('/:id/accounts/:accountid",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@get",{"_index":65,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["useguards(undefined)@get('/:id",{"_index":68,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["useguards(undefined)@get('/profile",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@patch('/:id",{"_index":72,"title":{},"body":{"controllers/ActivitiesController.html":{},"controllers/UsersController.html":{}}}],["useguards(undefined)@patch('/:id/accounts/:accountid",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@post",{"_index":52,"title":{},"body":{"controllers/ActivitiesController.html":{}}}],["useguards(undefined)@post('/:id/accounts",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@post('/:id/avatar')@useinterceptors(undefined",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@post('/login",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@post('passwordreset",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":673,"title":{},"body":{"controllers/UsersController.html":{}}}],["usenewurlparser",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":20,"title":{"interfaces/User.html":{}},"body":{"interfaces/Account.html":{},"injectables/ActivitiesService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"classes/MongoFilter.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user._doc",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["user._doc._id",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["user.dto",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":543,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateUserDTO.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":639,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["user.dto.ts:12",{"_index":548,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["user.dto.ts:13",{"_index":550,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:14",{"_index":547,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:17",{"_index":549,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:18",{"_index":552,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:19",{"_index":545,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:4",{"_index":598,"title":{},"body":{"classes/LoginUserDTO.html":{}}}],["user.dto.ts:5",{"_index":599,"title":{},"body":{"classes/LoginUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["user.dto.ts:6",{"_index":640,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["user.email",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.firstname",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":228,"title":{},"body":{"injectables/ActivitiesService.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.isvalidpassword(pass",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.lastname",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.model",{"_index":518,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateUserDTO.html":{},"injectables/UsersService.html":{}}}],["user.passwordresettoken",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.schema",{"_index":722,"title":{},"body":{"modules/UsersModule.html":{}}}],["usermodel",{"_index":730,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["usernamefield",{"_index":594,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":723,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":668,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":721,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":641,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":288,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":400,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["useunifiedtopology",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["utilities",{"_index":283,"title":{},"body":{"interfaces/Activity.html":{},"classes/CreateActivityDTO.html":{},"classes/UpdateActivityDTO.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["valid",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":572,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":591,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":574,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":524,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/CreateActivityDTO.html":{},"classes/CreateUserDTO.html":{},"classes/FetchActivitiesDTO.html":{},"classes/LoginUserDTO.html":{},"classes/MongoIdDTO.html":{},"classes/UpdateAccountDTO.html":{},"classes/UpdateActivityDTO.html":{},"classes/UpdateUserDTO.html":{},"dependencies.html":{}}}],["value",{"_index":833,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":789,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":849,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["versionkey",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["virtuals",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wallet",{"_index":526,"title":{},"body":{"classes/CreateAccountDTO.html":{},"classes/UpdateAccountDTO.html":{},"miscellaneous/variables.html":{}}}],["welcome",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["xpenz",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"index.html":{}}}],["zoom",{"_index":160,"title":{},"body":{"modules/ActivitiesModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Account.html":{"url":"interfaces/Account.html","title":"interface - Account","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Account\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        createdAt\n                                \n                                \n                                        id\n                                \n                                \n                                        name\n                                \n                                \n                                        starterAmount\n                                \n                                \n                                        theme\n                                \n                                \n                                        type\n                                \n                                \n                                        updatedAt\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        starterAmount\n                                    \n                                \n                                \n                                    \n                                        starterAmount:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        theme\n                                    \n                                \n                                \n                                    \n                                        theme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         AccountTypeENUM\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AccountTypeENUM\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface User {\n  id: string;\n  avatar: string;\n  firstname: string;\n  lastname: string;\n  email: string;\n  gender: GenderENUM;\n  password: string;\n  dob: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport enum GenderENUM {\n  Male = 'Male',\n  Female = 'Female',\n  Unspecified = 'Unspecified',\n}\n\nexport interface Account {\n  id: string;\n  name: string;\n  starterAmount: string;\n  theme: string;\n  type: AccountTypeENUM;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport enum AccountTypeENUM {\n  Male = 'Male',\n  Female = 'Female',\n  Unspecified = 'Unspecified',\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ActivitiesController.html":{"url":"controllers/ActivitiesController.html","title":"controller - ActivitiesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ActivitiesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activities/activities.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                activities\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createActivity\n                            \n                            \n                                    Async\n                                deleteActivity\n                            \n                            \n                                    Async\n                                findActivities\n                            \n                            \n                                    Async\n                                findActivity\n                            \n                            \n                                    Async\n                                updateActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createActivity(req, createActivityDTO: CreateActivityDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post()\n                \n            \n\n            \n                \n                    Defined in src/activities/activities.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createActivityDTO\n                                    \n                                                CreateActivityDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteActivity(req, mongoIdDTO: MongoIdDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/activities/activities.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mongoIdDTO\n                                    \n                                                MongoIdDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findActivities\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findActivities(req, fetchActivitiesDTO: FetchActivitiesDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get()\n                \n            \n\n            \n                \n                    Defined in src/activities/activities.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fetchActivitiesDTO\n                                    \n                                                FetchActivitiesDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findActivity(req, mongoIdDTO: MongoIdDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/activities/activities.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mongoIdDTO\n                                    \n                                                MongoIdDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateActivity(req, mongoIdDTO: MongoIdDTO, updateActivityDTO: UpdateActivityDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Patch('/:id')\n                \n            \n\n            \n                \n                    Defined in src/activities/activities.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mongoIdDTO\n                                    \n                                                MongoIdDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateActivityDTO\n                                    \n                                                UpdateActivityDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UseFilters,\n  Get,\n  Query,\n  Param,\n  Delete,\n  Request,\n  NotFoundException,\n  Patch,\n  BadRequestException,\n  UseGuards,\n} from '@nestjs/common';\n\nimport { AuthGuard } from '@nestjs/passport';\nimport { ActivitiesService } from './activities.service';\nimport { CreateActivityDTO } from './dto/create-activity.dto';\nimport { BadRequestFilter } from 'src/exceptions/bad-request.filters';\nimport { FetchActivitiesDTO } from './dto/fetch-activities.dto';\nimport { MongoIdDTO } from './dto/mongo-id.dto';\nimport { UpdateActivityDTO } from './dto/update-activity.dto';\nimport { Activity } from './activity.model';\n\n@Controller('activities')\n@UseFilters(BadRequestFilter)\nexport class ActivitiesController {\n  constructor(private activitiesService: ActivitiesService) {}\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get()\n  async findActivities(\n    @Request() req,\n    @Query() fetchActivitiesDTO: FetchActivitiesDTO,\n  ) {\n    const data = await this.activitiesService.findActivities(\n      fetchActivitiesDTO,\n      req.user,\n    );\n    return {\n      statusCode: 200,\n      message: 'Fetch successful',\n      ...data,\n    };\n  }\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/:id')\n  async findActivity(@Request() req, @Param() mongoIdDTO: MongoIdDTO) {\n    const data = await this.activitiesService.findActivity(\n      mongoIdDTO,\n      req.user,\n    );\n    if (!data) {\n      throw new NotFoundException({\n        statusCode: 404,\n        error: `Activity ${mongoIdDTO.id} not found`,\n      });\n    }\n    return {\n      statusCode: 200,\n      message: 'Fetch success',\n      data,\n    };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post()\n  async createActivity(\n    @Request() req,\n    @Body() createActivityDTO: CreateActivityDTO,\n  ) {\n    const data = await this.activitiesService.createActivity(\n      createActivityDTO,\n      req.user,\n    );\n    return {\n      statusCode: 201,\n      message: 'Create successful',\n      data,\n    };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/:id')\n  async deleteActivity(@Request() req, @Param() mongoIdDTO: MongoIdDTO) {\n    const data = await this.activitiesService.deleteActivity(\n      mongoIdDTO,\n      req.user,\n    );\n    return {\n      statusCode: 200,\n      message: `Activity ${data} deleted successfully`,\n    };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Patch('/:id')\n  async updateActivity(\n    @Request() req,\n    @Param() mongoIdDTO: MongoIdDTO,\n    @Body() updateActivityDTO: UpdateActivityDTO,\n  ) {\n    let data: Promise;\n\n    if (!Object.values(updateActivityDTO).length) {\n      throw new BadRequestException({\n        statusCode: 400,\n        message: 'Bad Request',\n        error: `Must provide at least one parameter to update`,\n      });\n    }\n\n    data = await this.activitiesService.updateActivity(\n      mongoIdDTO,\n      updateActivityDTO,\n      req.user,\n    );\n\n    if (!data) {\n      throw new NotFoundException({\n        statusCode: 404,\n        message: 'Not Found',\n        error: `Activity with provided id does not exist`,\n      });\n    }\n\n    return {\n      statusCode: 200,\n      message: 'Update successful',\n      data,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ActivitiesModule.html":{"url":"modules/ActivitiesModule.html","title":"module - ActivitiesModule","body":"\n                   \n\n\n\n\n    Modules\n    ActivitiesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ActivitiesModule\n\n\n\ncluster_ActivitiesModule_providers\n\n\n\n\nActivitiesService\n\nActivitiesService\n\n\n\nActivitiesModule\n\nActivitiesModule\n\nActivitiesModule -->\n\nActivitiesService->ActivitiesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/activities/activities.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ActivitiesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ActivitiesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { ActivitiesService } from './activities.service';\nimport { ActivitiesController } from './activities.controller';\nimport { ActivitySchema } from './activity.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Activity', schema: ActivitySchema }]),\n  ],\n  providers: [ActivitiesService],\n  controllers: [ActivitiesController],\n})\nexport class ActivitiesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ActivitiesService.html":{"url":"injectables/ActivitiesService.html","title":"injectable - ActivitiesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ActivitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activities/activities.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createActivity\n                            \n                            \n                                    Async\n                                deleteActivity\n                            \n                            \n                                    Async\n                                findActivities\n                            \n                            \n                                    Async\n                                findActivity\n                            \n                            \n                                    Async\n                                updateActivity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(activityModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/activities/activities.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        activityModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createActivity(createActivityDto: CreateActivityDTO, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/activities/activities.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createActivityDto\n                                    \n                                                CreateActivityDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteActivity(mongoIdDTO: MongoIdDTO, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/activities/activities.service.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mongoIdDTO\n                                    \n                                                MongoIdDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findActivities\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findActivities(fetchActivitiesDTO: FetchActivitiesDTO, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/activities/activities.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fetchActivitiesDTO\n                                    \n                                                FetchActivitiesDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findActivity(mongoIdDTO: MongoIdDTO, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/activities/activities.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mongoIdDTO\n                                    \n                                                MongoIdDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateActivity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateActivity(mongoIdDTO: MongoIdDTO, updateActivityDto: UpdateActivityDTO, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/activities/activities.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    mongoIdDTO\n                                    \n                                                MongoIdDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateActivityDto\n                                    \n                                                UpdateActivityDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport * as moment from 'moment';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Activity } from './activity.model';\nimport { CreateActivityDTO } from './dto/create-activity.dto';\nimport { FetchActivitiesDTO } from './dto/fetch-activities.dto';\nimport { MongoIdDTO } from './dto/mongo-id.dto';\nimport { UpdateActivityDTO } from './dto/update-activity.dto';\nimport { User } from 'src/users/user.model';\n\n@Injectable()\nexport class ActivitiesService {\n  constructor(\n    @InjectModel('Activity') private readonly activityModel: Model,\n  ) {}\n\n  async findActivities(fetchActivitiesDTO: FetchActivitiesDTO, user: User) {\n    const { search, size, page, dateType, ...rest } = fetchActivitiesDTO;\n    const setDate = moment(rest.date).startOf((dateType as any) || 'day');\n\n    const restDate = rest.date\n      ? {\n          ...rest,\n          date: {\n            $gte: setDate.toDate(),\n            $lte: moment(setDate)\n              .endOf((dateType as any) || 'day')\n              .toDate(),\n          },\n        }\n      : { ...rest };\n    const limit = parseInt(\n      fetchActivitiesDTO.size || `${process.env.PAGE_SIZE}`,\n      10,\n    );\n    let pageNumber = parseInt(page || `${process.env.PAGE}`, 10);\n    if (isNaN(pageNumber) || pageNumber  0 ? (pageNumber - 1) * limit : 0;\n    const searchObj = search\n      ? { $text: { $search: search }, owner: user.id, ...restDate }\n      : { owner: user.id, ...restDate };\n\n    const data = await this.activityModel\n      .find(searchObj)\n      .limit(limit)\n      .skip(skip)\n      .sort('-date')\n      .exec();\n\n    const total = await this.activityModel.countDocuments(searchObj);\n    return {\n      data,\n      meta: {\n        page: pageNumber,\n        pageSize: limit,\n        count: data.length,\n        total,\n      },\n    };\n  }\n\n  async findActivity(mongoIdDTO: MongoIdDTO, user: User): Promise {\n    const { id } = mongoIdDTO;\n    return await this.activityModel.findOne({ _id: id, owner: user.id }).exec();\n  }\n\n  async createActivity(\n    createActivityDto: CreateActivityDTO,\n    user: User,\n  ): Promise {\n    const createdActivity = new this.activityModel({\n      ...createActivityDto,\n      date: createActivityDto.date || new Date().toJSON(),\n      owner: user.id,\n    });\n    return await createdActivity.save();\n  }\n\n  async updateActivity(\n    mongoIdDTO: MongoIdDTO,\n    updateActivityDto: UpdateActivityDTO,\n    user: User,\n  ) {\n    const { id } = mongoIdDTO;\n\n    return await this.activityModel.findOneAndUpdate(\n      { _id: id, owner: user.id },\n      updateActivityDto,\n      { new: true },\n    );\n  }\n\n  async deleteActivity(mongoIdDTO: MongoIdDTO, user: User) {\n    const { id } = mongoIdDTO;\n    const deleted = await this.activityModel.deleteOne({\n      _id: id,\n      owner: user.id,\n    });\n\n    if (deleted.deletedCount) {\n      return id;\n    }\n\n    throw new NotFoundException({\n      statusCode: 404,\n      error: `Activity ${id} not found`,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Activity.html":{"url":"interfaces/Activity.html","title":"interface - Activity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Activity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activities/activity.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        amount\n                                \n                                \n                                        category\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        date\n                                \n                                \n                                        description\n                                \n                                \n                                        id\n                                \n                                \n                                        title\n                                \n                                \n                                        type\n                                \n                                \n                                        updatedAt\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                    \n                                \n                                \n                                    \n                                        amount:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                    \n                                \n                                \n                                    \n                                        category:         CategoryENUM\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CategoryENUM\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         ActTypeENUM\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActTypeENUM\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Activity {\n  id: string;\n  title: string;\n  description: string;\n  type: ActTypeENUM;\n  category: CategoryENUM;\n  amount: string;\n  date: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport enum ActTypeENUM {\n  EXPENDITURE = 'EXPENDITURE',\n  REVENUE = 'REVENUE',\n}\n\nexport enum CategoryENUM {\n  Automobile = 'Automobile',\n  Salary = 'Salary',\n  Savings = 'Savings',\n  Investment = 'Investment',\n  Shopping = 'Shopping',\n  FoodDrinks = 'Food & Drinks',\n  Education = 'Education',\n  Entertainment = 'Entertainment',\n  Furniture = 'Furniture',\n  Gadget = 'Gadget',\n  Gift = 'Gift',\n  Groceries = 'Groceries',\n  Fitness = 'Fitness',\n  Loan = 'Loan',\n  Medical = 'Medical',\n  Misc = 'Misc',\n  Housing = 'Housing',\n  Clothing = 'Clothing',\n  Tax = 'Tax',\n  Transport = 'Transport',\n  Travel = 'Travel',\n  Utilities = 'Utilities',\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nActivitiesModule\n\nActivitiesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nActivitiesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ActivitiesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { HandlebarsAdapter, MailerModule } from '@nest-modules/mailer';\nimport { MulterModule } from '@nestjs/platform-express';\n\nimport { ActivitiesModule } from './activities/activities.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    MongooseModule.forRoot(process.env.DATABASE_URL, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n    }),\n    MailerModule.forRoot({\n      transport: {\n        host: 'smtp.ethereal.email',\n        port: 587,\n        auth: {\n          user: 'flavie.walsh@ethereal.email',\n          pass: 'mSptTrnzsduThc2XNK',\n        },\n      },\n      defaults: {\n        from: '\"xpenz\" ',\n      },\n      template: {\n        dir: __dirname + '/templates',\n        adapter: new HandlebarsAdapter(), // or new PugAdapter()\n        options: {\n          strict: true,\n        },\n      },\n    }),\n    ActivitiesModule,\n    AuthModule,\n    UsersModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                passwordReset\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                requestPasswordReset\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            passwordReset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordReset(pass: string, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('passwordReset')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            profile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Get('/profile')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestPasswordReset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestPasswordReset(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('requestPasswordReset')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(createUserDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseFilters,\n  Post,\n  Get,\n  Body,\n  UseGuards,\n  Request,\n  BadRequestException,\n} from '@nestjs/common';\nimport { BadRequestFilter } from 'src/exceptions/bad-request.filters';\nimport { AuthService } from './auth.service';\nimport { CreateUserDTO } from 'src/users/dto/create-user.dto';\nimport { MongoFilter } from 'src/exceptions/mongo.filters';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller('auth')\n@UseFilters(BadRequestFilter, MongoFilter)\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('/signup')\n  async signup(@Body() createUserDTO: CreateUserDTO) {\n    return this.authService.signup(createUserDTO);\n  }\n\n  @UseGuards(AuthGuard('local'))\n  @Post('/login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get('/profile')\n  async profile(@Request() req) {\n    return this.authService.profile(req.user);\n  }\n\n  @Post('requestPasswordReset')\n  async requestPasswordReset(@Body('email') email: string) {\n    return this.authService.requestPasswordReset(email);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('passwordReset')\n  async passwordReset(@Body('password') pass: string, @Request() req) {\n    const user = await this.authService.passwordReset(pass, req.user);\n\n    if (!user) {\n      throw new BadRequestException({\n        statusCode: 400,\n        error: 'Bad Request',\n        message: 'User cannot be found',\n      });\n    }\n    const obj = { ...user._doc, id: user._doc._id };\n    const { password, _id, accounts, ...data } = obj;\n\n    return {\n      statusCode: 200,\n      message: 'Password reset successful',\n      data,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\n\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\n\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      useFactory: () => ({\n        secret: process.env.JWT_SECRET,\n        signOptions: { expiresIn: '1h' },\n      }),\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                passwordReset\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                requestPasswordReset\n                            \n                            \n                                    Async\n                                saltPassword\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            passwordReset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    passwordReset(password: string, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            profile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestPasswordReset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestPasswordReset(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            saltPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saltPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcryptjs';\n\nimport { UsersService } from '../users/users.service';\nimport { User } from 'src/users/user.model';\nimport { CreateUserDTO } from 'src/users/dto/create-user.dto';\nimport { MailerService } from '@nest-modules/mailer';\n// import { LoginUserDTO } from 'src/users/dto/login-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly mailerService: MailerService,\n  ) {}\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.findOne(email);\n    const isMatch = user ? await user.isValidPassword(pass) : false;\n    if (user && isMatch) {\n      return user;\n    }\n\n    throw new UnauthorizedException({\n      statusCode: 401,\n      message: 'Unauthorized',\n      error: 'Invalid email or password provided',\n    });\n  }\n\n  async saltPassword(password: string) {\n    try {\n      const salt = await bcrypt.genSalt(10);\n      const passwordHash = await bcrypt.hash(password, salt);\n      return passwordHash;\n    } catch (error) {\n      throw new BadRequestException({ info: error });\n    }\n  }\n\n  async signup(createUserDTO: CreateUserDTO): Promise {\n    const passwordHash = await this.saltPassword(createUserDTO.password);\n    createUserDTO.password = passwordHash;\n    const user = await this.usersService.create(createUserDTO);\n    const loginDetails = await this.login(user);\n    const obj = { ...user._doc, id: user._doc._id };\n    const { password, _id, ...rest } = obj;\n    await this.mailerService.sendMail({\n      to: 'customer@somemailbox.com', // list of receivers\n      from: 'noreply@xpenz.com', // sender address\n      subject: 'Welcome to Xpenz', // Subject line\n      template: `${process.env.mailtemplates_Dir}/welcome`, // The `.pug` or `.hbs` extension is appended automatically.\n      context: {\n        username: `${user.firstname} ${user.lastname}`,\n      },\n    });\n\n    return {\n      statusCode: 200,\n      message: 'Signup request successful',\n      data: { user: rest, token: loginDetails.data.token },\n    };\n  }\n\n  async requestPasswordReset(email: string) {\n    const user = await this.usersService.findUser(email);\n    if (!user) {\n      throw new UnauthorizedException({\n        statusCode: 401,\n        message: 'Unauthorized',\n        error: 'Invalid email provided',\n      });\n    }\n\n    const payload = { email, passwordResetToken: true, id: user.id };\n    const resetToken = this.jwtService.sign(payload, { expiresIn: '30mins' });\n\n    await this.mailerService.sendMail({\n      to: email, // list of receivers\n      from: 'noreply@xpenz.com', // sender address\n      subject: 'Password reset request', // Subject line\n      template: `${process.env.mailtemplates_Dir}/password-reset`, // The `.pug` or `.hbs` extension is appended automatically.\n      context: {\n        resetToken,\n        name: `${user.firstname} ${user.lastname}`,\n      },\n    });\n    return {\n      statusCode: 200,\n      message:\n        'Reset request successful, resetToken is valid for the next 30 minutes',\n      data: { resetToken },\n    };\n  }\n\n  async passwordReset(password: string, user: any) {\n    if (!user.passwordResetToken) {\n      throw new UnauthorizedException({\n        statusCode: 401,\n        message: 'Unauthorized',\n        error: 'Invalid token provided',\n      });\n    }\n    const passwordHash = await this.saltPassword(password);\n    return await this.usersService.changePassword(passwordHash, user.id);\n  }\n\n  async login(user: any) {\n    const payload = { email: user.email, id: user.id, sub: user.id };\n    return {\n      statusCode: 200,\n      message: 'Login successful',\n      data: { user, token: this.jwtService.sign(payload) },\n    };\n  }\n\n  async profile(user: any) {\n    const foundUser = await this.usersService.findUser(user.email);\n    const obj = { ...foundUser._doc, id: foundUser._doc._id };\n    const { password, _id, ...rest } = obj;\n    return {\n      statusCode: 200,\n      message: 'Request successful',\n      data: { user: rest },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequestFilter.html":{"url":"classes/BadRequestFilter.html","title":"class - BadRequestFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequestFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exceptions/bad-request.filters.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/exceptions/bad-request.filters.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  BadRequestException,\n} from '@nestjs/common';\n\n@Catch(BadRequestException)\nexport class BadRequestFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse();\n    if (Array.isArray(exception.message.message)) {\n      return response.status(422).json({\n        statusCode: 422,\n        message: 'Unprocessable Entity',\n        errors: exception.message.message.reduce((acc, cur) => {\n          acc.push({\n            property: cur.property,\n            messages: Object.values(cur.constraints),\n          });\n          return acc;\n        }, []),\n      });\n    }\n    return response.status(400).json(exception.getResponse());\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDTO.html":{"url":"classes/CreateAccountDTO.html","title":"class - CreateAccountDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-account.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                starterAmount\n                            \n                            \n                                theme\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-account.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            starterAmount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumberString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-account.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-account.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AccountTypeENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-account.dto.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AccountTypeENUM } from './../user.model';\nimport {\n  IsNotEmpty,\n  IsString,\n  IsIn,\n  IsNumberString,\n  IsOptional,\n} from 'class-validator';\n\nexport class CreateAccountDTO {\n  @IsNotEmpty() @IsString() name: string;\n  @IsNotEmpty() @IsNumberString() starterAmount: string;\n  @IsString()\n  @IsIn(['DIGITAL WALLET', 'BANK', 'CREDIT CARD'])\n  type: AccountTypeENUM;\n  @IsOptional() @IsString() theme: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateActivityDTO.html":{"url":"classes/CreateActivityDTO.html","title":"class - CreateActivityDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateActivityDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activities/dto/create-activity.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                amount\n                            \n                            \n                                category\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            account\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/create-activity.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumberString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/create-activity.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CategoryENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/create-activity.dto.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsISO8601()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/create-activity.dto.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/create-activity.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/create-activity.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActTypeENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/create-activity.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CategoryENUM } from './../activity.model';\nimport {\n  IsNotEmpty,\n  IsNumberString,\n  IsString,\n  IsIn,\n  IsISO8601,\n  IsOptional,\n} from 'class-validator';\nimport { ActTypeENUM } from '../activity.model';\n\nexport class CreateActivityDTO {\n  @IsNotEmpty() @IsString() title: string;\n  @IsString() description: string;\n  @IsNotEmpty() @IsNumberString() amount: string;\n  @IsOptional() @IsString() account: string;\n  @IsString()\n  @IsNotEmpty()\n  @IsIn(['EXPENDITURE', 'REVENUE'])\n  type: ActTypeENUM;\n  @IsString()\n  @IsNotEmpty()\n  @IsIn([\n    'Automobile',\n    'Salary',\n    'Savings',\n    'Investment',\n    'Shopping',\n    'Food & Drinks',\n    'Education',\n    'Entertainment',\n    'Furniture',\n    'Gadget',\n    'Gift',\n    'Groceries',\n    'Fitness',\n    'Loan',\n    'Medical',\n    'Misc',\n    'Housing',\n    'Clothing',\n    'Transport',\n    'Travel',\n    'Utilities',\n  ])\n  category: CategoryENUM;\n  @IsOptional() @IsString() @IsISO8601() date: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dob\n                            \n                            \n                                email\n                            \n                            \n                                firstname\n                            \n                            \n                                gender\n                            \n                            \n                                lastname\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dob\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsISO8601()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GenderENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Length(6)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsIn,\n  IsEmail,\n  IsISO8601,\n  Length,\n} from 'class-validator';\nimport { GenderENUM } from '../user.model';\n\nexport class CreateUserDTO {\n  @IsNotEmpty() @IsString() firstname: string;\n  @IsNotEmpty() @IsString() lastname: string;\n  @IsNotEmpty() @IsString() @IsEmail() email: string;\n  @IsString()\n  @IsIn(['Female', 'Male', 'Unspecified'])\n  gender: GenderENUM;\n  @IsNotEmpty() @IsString() @Length(6) password: string;\n  @IsNotEmpty() @IsISO8601() dob: string;\n}\n// $2a$10$3z6jFxPxZhKq5BUzfKAhwOEYvCC3oHcwgEUmy/rTphnragxIGelIG\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FetchActivitiesDTO.html":{"url":"classes/FetchActivitiesDTO.html","title":"class - FetchActivitiesDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FetchActivitiesDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activities/dto/fetch-activities.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                category\n                            \n                            \n                                date\n                            \n                            \n                                dateType\n                            \n                            \n                                page\n                            \n                            \n                                search\n                            \n                            \n                                size\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            account\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/fetch-activities.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CategoryENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/fetch-activities.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsISO8601()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/fetch-activities.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateType\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/fetch-activities.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            page\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNumberString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/fetch-activities.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/fetch-activities.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            size\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNumberString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/fetch-activities.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActTypeENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/fetch-activities.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CategoryENUM, ActTypeENUM } from './../activity.model';\nimport {\n  IsNumberString,\n  IsOptional,\n  IsString,\n  IsPositive,\n  IsISO8601,\n} from 'class-validator';\n\nexport class FetchActivitiesDTO {\n  @IsOptional() @IsNumberString() page: string;\n  @IsOptional() @IsNumberString() size: string;\n  @IsOptional() @IsString() search: string;\n  @IsOptional() @IsString() account: string;\n  @IsOptional() @IsString() category: CategoryENUM;\n  @IsOptional() @IsISO8601() @IsString() date: string;\n  @IsOptional() @IsString() type: ActTypeENUM;\n  @IsOptional() @IsString() dateType: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any) {\n    return { ...payload };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n// import { User } from 'src/users/user.model';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      usernameField: 'email',\n      passwordField: 'password',\n    });\n  }\n\n  async validate(email: string, pass: string): Promise {\n    const user = await this.authService.validateUser(email, pass);\n\n    const onj = { ...user._doc, id: user._doc._id };\n    const { password, _id, ...rest } = onj;\n    return rest;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDTO.html":{"url":"classes/LoginUserDTO.html","title":"class - LoginUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/login-user.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Length(6)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/login-user.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsEmail, Length } from 'class-validator';\n\nexport class LoginUserDTO {\n  @IsNotEmpty() @IsString() @IsEmail() email: string;\n  @IsNotEmpty() @IsString() @Length(6) password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MongoFilter.html":{"url":"classes/MongoFilter.html","title":"class - MongoFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MongoFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/exceptions/mongo.filters.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: MongoError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/exceptions/mongo.filters.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            MongoError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost } from '@nestjs/common';\nimport { MongoError } from 'mongodb';\n@Catch(MongoError)\nexport class MongoFilter implements ExceptionFilter {\n  catch(exception: MongoError, host: ArgumentsHost) {\n    const response = host.switchToHttp().getResponse();\n    switch (exception.code) {\n      case 11000:\n        return response.status(409).json({\n          message: `User ${exception.keyValue.email} already exists.`,\n          statusCode: 409,\n        });\n\n      default:\n        return response\n          .status(500)\n          .json({ message: 'Internal error.', statusCode: 500 });\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MongoIdDTO.html":{"url":"classes/MongoIdDTO.html","title":"class - MongoIdDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MongoIdDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activities/dto/mongo-id.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsMongoId()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/mongo-id.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsMongoId, IsNotEmpty } from 'class-validator';\n\nexport class MongoIdDTO {\n  @IsMongoId() @IsNotEmpty() id: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAccountDTO.html":{"url":"classes/UpdateAccountDTO.html","title":"class - UpdateAccountDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAccountDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-account.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                starterAmount\n                            \n                            \n                                theme\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-account.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            starterAmount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNumberString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-account.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            theme\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-account.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         AccountTypeENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-account.dto.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AccountTypeENUM } from '../user.model';\nimport { IsString, IsIn, IsNumberString, IsOptional } from 'class-validator';\n\nexport class UpdateAccountDTO {\n  @IsOptional() @IsString() name: string;\n  @IsOptional() @IsNumberString() starterAmount: string;\n  @IsString()\n  @IsOptional()\n  @IsIn(['DIGITAL WALLET', 'BANK', 'CREDIT CARD'])\n  type: AccountTypeENUM;\n  @IsOptional() @IsString() theme: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateActivityDTO.html":{"url":"classes/UpdateActivityDTO.html","title":"class - UpdateActivityDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateActivityDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/activities/dto/update-activity.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                amount\n                            \n                            \n                                category\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            account\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/update-activity.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNumberString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/update-activity.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CategoryENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/update-activity.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsISO8601()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/update-activity.dto.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/update-activity.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/update-activity.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ActTypeENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/activities/dto/update-activity.dto.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsOptional,\n  IsNumberString,\n  IsString,\n  IsIn,\n  IsISO8601,\n} from 'class-validator';\nimport { ActTypeENUM, CategoryENUM } from '../activity.model';\n\nexport class UpdateActivityDTO {\n  @IsOptional() @IsString() title: string;\n  @IsOptional() @IsString() description: string;\n  @IsOptional() @IsNumberString() amount: string;\n  @IsOptional() @IsString() account: string;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['EXPENDITURE', 'REVENUE'])\n  type: ActTypeENUM;\n  @IsString()\n  @IsOptional()\n  @IsIn([\n    'Automobile',\n    'Shopping',\n    'Salary',\n    'Savings',\n    'Investment',\n    'Food & Drinks',\n    'Education',\n    'Entertainment',\n    'Furniture',\n    'Gadget',\n    'Gift',\n    'Groceries',\n    'Fitness',\n    'Loan',\n    'Medical',\n    'Misc',\n    'Housing',\n    'Clothing',\n    'Transport',\n    'Travel',\n    'Utilities',\n  ])\n  category: CategoryENUM;\n  @IsOptional() @IsString() @IsISO8601() date: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDTO.html":{"url":"classes/UpdateUserDTO.html","title":"class - UpdateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dob\n                            \n                            \n                                firstname\n                            \n                            \n                                gender\n                            \n                            \n                                lastname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dob\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsISO8601()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-user.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-user.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gender\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GenderENUM\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-user.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsIn, IsISO8601, IsOptional } from 'class-validator';\nimport { GenderENUM } from '../user.model';\n\nexport class UpdateUserDTO {\n  @IsOptional() @IsString() firstname: string;\n  @IsOptional() @IsString() lastname: string;\n  @IsOptional()\n  @IsString()\n  @IsOptional()\n  @IsIn(['Female', 'Male', 'Unspecified'])\n  gender: GenderENUM;\n  @IsOptional() @IsISO8601() dob: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        avatar\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        dob\n                                \n                                \n                                        email\n                                \n                                \n                                        firstname\n                                \n                                \n                                        gender\n                                \n                                \n                                        id\n                                \n                                \n                                        lastname\n                                \n                                \n                                        password\n                                \n                                \n                                        updatedAt\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatar\n                                    \n                                \n                                \n                                    \n                                        avatar:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dob\n                                    \n                                \n                                \n                                    \n                                        dob:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstname\n                                    \n                                \n                                \n                                    \n                                        firstname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                    \n                                \n                                \n                                    \n                                        gender:         GenderENUM\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         GenderENUM\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastname\n                                    \n                                \n                                \n                                    \n                                        lastname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface User {\n  id: string;\n  avatar: string;\n  firstname: string;\n  lastname: string;\n  email: string;\n  gender: GenderENUM;\n  password: string;\n  dob: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport enum GenderENUM {\n  Male = 'Male',\n  Female = 'Female',\n  Unspecified = 'Unspecified',\n}\n\nexport interface Account {\n  id: string;\n  name: string;\n  starterAmount: string;\n  theme: string;\n  type: AccountTypeENUM;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport enum AccountTypeENUM {\n  Male = 'Male',\n  Female = 'Female',\n  Unspecified = 'Unspecified',\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                            \n                                    Async\n                                uploadAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(createAccountDto: CreateAccountDTO, req, mongoIdDTO: MongoIdDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/:id/accounts')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mongoIdDTO\n                                    \n                                                MongoIdDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAccount(req, id, accountId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Delete('/:id/accounts/:accountId')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:210\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(updateUserDTO: UpdateUserDTO, req: any, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Patch('/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDTO\n                                    \n                                                UpdateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(updateAccountDto: UpdateAccountDTO, req, id, accountId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Patch('/:id/accounts/:accountId')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(avatar, req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('/:id/avatar')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    avatar\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { UpdateAccountDTO } from './dto/update-account.dto';\nimport { AuthGuard } from '@nestjs/passport';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { MongoFilter } from './../exceptions/mongo.filters';\nimport { BadRequestFilter } from './../exceptions/bad-request.filters';\nimport { CreateAccountDTO } from './dto/create-account.dto';\nimport { UsersService } from './users.service';\nimport { diskStorage } from 'multer';\nimport { extname } from 'path';\n\nimport {\n  Controller,\n  Body,\n  UseFilters,\n  UseGuards,\n  Request,\n  Param,\n  UnauthorizedException,\n  NotFoundException,\n  Patch,\n  BadRequestException,\n  Delete,\n  Post,\n  UseInterceptors,\n  UploadedFile,\n} from '@nestjs/common';\nimport { MongoIdDTO } from 'src/activities/dto/mongo-id.dto';\nimport { UpdateUserDTO } from './dto/update-user.dto';\n\n@Controller('users')\n@UseFilters(BadRequestFilter, MongoFilter)\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @UseGuards(AuthGuard('jwt'))\n  @Patch('/:id')\n  async editUser(\n    @Body() updateUserDTO: UpdateUserDTO,\n    @Request() req: any,\n    @Param('id') id: string,\n  ) {\n    if (req.user.id !== id) {\n      throw new UnauthorizedException({\n        statusCode: 401,\n        error: 'Unauthorized',\n        message: `User not authorized to update`,\n      });\n    }\n\n    if (!Object.values(updateUserDTO).length) {\n      throw new BadRequestException({\n        statusCode: 400,\n        message: 'Bad Request',\n        error: `Must provide at least one parameter to update`,\n      });\n    }\n\n    const user = await this.usersService.editUser(id, updateUserDTO);\n\n    if (!user) {\n      throw new NotFoundException({\n        statusCode: 404,\n        message: 'Not Found',\n        error: `User with provided id does not exist`,\n      });\n    }\n\n    const obj = { ...user._doc, id: user._doc._id };\n    const { password, _id, accounts, ...data } = obj;\n\n    return {\n      statusCode: 200,\n      message: 'Update successful',\n      data,\n    };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/:id/avatar')\n  @UseInterceptors(\n    FileInterceptor('avatar', {\n      storage: diskStorage({\n        destination: './uploads/avatars/tmp',\n        filename: (req, file, cb) => {\n          return cb(null, `${req.user.id}${extname(file.originalname)}`);\n        },\n      }),\n      limits: { fileSize: 5000000 },\n      fileFilter(req, file, cb) {\n        const filetypes = /jpeg|jpg|png/;\n        const ext = filetypes.test(extname(file.originalname).toLowerCase());\n        const mime = filetypes.test(file.mimetype);\n        if (mime && ext) {\n          return cb(null, true);\n        } else {\n          cb(\n            new BadRequestException({\n              statusCode: 400,\n              error: 'Bad Request',\n              message: 'Unsupported file uploaded',\n            }),\n            false,\n          );\n        }\n      },\n    }),\n  )\n  async uploadAvatar(\n    @UploadedFile() avatar,\n    @Request() req,\n    @Param('id') id: string,\n  ) {\n    const user = await this.usersService.uploadAvatar(\n      req.file.path,\n      req.user.id,\n    );\n\n    if (!user) {\n      throw new BadRequestException({\n        statusCode: 400,\n        error: 'Bad Request',\n        message: 'User does not exist',\n      });\n    }\n\n    const obj = { ...user._doc, id: user._doc._id };\n    const { password, _id, accounts, ...data } = obj;\n\n    return {\n      statusCode: 200,\n      message: 'Password reset successful',\n      data,\n    };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('/:id/accounts')\n  async createAccount(\n    @Body() createAccountDto: CreateAccountDTO,\n    @Request() req,\n    @Param() mongoIdDTO: MongoIdDTO,\n  ) {\n    if (req.user.id !== mongoIdDTO.id) {\n      throw new UnauthorizedException({\n        statusCode: 401,\n        error: 'Unauthorized',\n        message: `User id mismatch`,\n      });\n    }\n\n    const data = await this.usersService.createAccount(\n      createAccountDto,\n      req.user,\n    );\n\n    if (!data) {\n      throw new BadRequestException({\n        statusCode: 400,\n        error: 'Bad Request',\n        message: 'Action could not be completed',\n      });\n    }\n\n    return {\n      statusCode: 200,\n      message: 'Successful',\n      data: data.accounts[data.accounts.length - 1],\n    };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Patch('/:id/accounts/:accountId')\n  async updateAccount(\n    @Body() updateAccountDto: UpdateAccountDTO,\n    @Request() req,\n    @Param('id') id,\n    @Param('accountId') accountId,\n  ) {\n    if (req.user.id !== id) {\n      throw new UnauthorizedException({\n        statusCode: 401,\n        error: 'Unauthorized',\n        message: `User id mismatch`,\n      });\n    }\n\n    const data = await this.usersService.updateAccount(\n      updateAccountDto,\n      req.user,\n      accountId,\n    );\n\n    if (!data) {\n      throw new BadRequestException({\n        statusCode: 400,\n        error: 'Bad Request',\n        message: 'Action could not be completed',\n      });\n    }\n\n    return {\n      statusCode: 200,\n      message: 'Successful',\n      data: data.accounts.find(acc => acc.id === accountId),\n    };\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Delete('/:id/accounts/:accountId')\n  async deleteAccount(\n    @Request() req,\n    @Param('id') id,\n    @Param('accountId') accountId,\n  ) {\n    if (req.user.id !== id) {\n      throw new UnauthorizedException({\n        statusCode: 401,\n        error: 'Unauthorized',\n        message: `User id mismatch`,\n      });\n    }\n\n    const data = await this.usersService.deleteAccount(req.user, accountId);\n    if (!data) {\n      throw new BadRequestException({\n        statusCode: 400,\n        error: 'Bad Request',\n        message: 'Action could not be completed',\n      });\n    }\n\n    return {\n      statusCode: 200,\n      message: 'Successful',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { UsersService } from './users.service';\nimport { UserSchema } from './user.schema';\nimport { UsersController } from './users.controller';\n\n@Module({\n  imports: [MongooseModule.forFeature([{ name: 'User', schema: UserSchema }])],\n  providers: [UsersService],\n  exports: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findUser\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                            \n                                    Async\n                                uploadAvatar\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changePassword(password: string, id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(createAccountDTO: CreateAccountDTO, user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDTO\n                                    \n                                                CreateAccountDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAccount(user: any, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(id: string, updateUserDTO: UpdateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDTO\n                                    \n                                                UpdateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUser(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(updateAccountDto: UpdateAccountDTO, user: any, accountId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file, id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UpdateAccountDTO } from './dto/update-account.dto';\nimport { CreateAccountDTO } from './dto/create-account.dto';\nimport {\n  Injectable,\n  BadRequestException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User } from './user.model';\nimport { CreateUserDTO } from './dto/create-user.dto';\nimport { UpdateUserDTO } from './dto/update-user.dto';\nimport * as sharp from 'sharp';\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel('User') private readonly userModel: Model) {}\n  async findOne(email: string) {\n    return await this.userModel.findOne({ email });\n  }\n\n  async findUser(email: string) {\n    return await this.userModel.findOne({ email }, { password: 0 });\n  }\n\n  async create(createUserDTO: CreateUserDTO): Promise {\n    const createdUser = new this.userModel(createUserDTO);\n    return await createdUser.save();\n  }\n\n  async editUser(id: string, updateUserDTO: UpdateUserDTO) {\n    return await this.userModel.findOneAndUpdate({ _id: id }, updateUserDTO, {\n      new: true,\n    });\n  }\n\n  async uploadAvatar(file, id) {\n    Promise.all(\n      [640, 240, 160].map(size => {\n        return sharp(file)\n          .resize(size, size)\n          .toFormat('jpeg')\n          .toFile(`./uploads/avatars/${id}-${size}.jpeg`);\n      }),\n    );\n\n    return await this.userModel.findByIdAndUpdate(\n      { _id: id },\n      { avatar: `/uploads/avatars/${id}-${640}.jpeg` },\n      { new: true },\n    );\n  }\n\n  async changePassword(password: string, id: string) {\n    return await this.userModel.findByIdAndUpdate(\n      { _id: id },\n      { password },\n      {\n        new: true,\n      },\n    );\n  }\n\n  async createAccount(createAccountDTO: CreateAccountDTO, user: any) {\n    const theOne = await this.userModel.findById({ _id: user.id });\n    if (theOne.accounts.length >= 10) {\n      throw new BadRequestException({\n        statusCode: 400,\n        error: 'Bad request',\n        message: 'Accounts limit exceeded',\n      });\n    }\n\n    theOne.accounts.push(createAccountDTO);\n    const updated = await theOne.save();\n    return updated;\n  }\n\n  async updateAccount(\n    updateAccountDto: UpdateAccountDTO,\n    user: any,\n    accountId: string,\n  ) {\n    const setObj = Object.keys(updateAccountDto).reduce((acc, cur) => {\n      acc[`accounts.$.${cur}`] = updateAccountDto[cur];\n      return acc;\n    }, {});\n\n    return await this.userModel.findOneAndUpdate(\n      {\n        _id: user.id,\n        'accounts._id': accountId,\n      },\n      {\n        $set: { ...setObj },\n      },\n      { new: true },\n    );\n  }\n\n  async deleteAccount(user: any, accountId: string) {\n    const theOne = await this.userModel.findById({ _id: user.id });\n    try {\n      theOne.accounts.id(accountId).remove();\n    } catch (error) {\n      throw new NotFoundException({\n        statusCode: 404,\n        error: 'Not found',\n        message: 'Requested account not found',\n      });\n    }\n    const updated = await theOne.save();\n    return updated;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/activities/activities.controller.ts\n            \n            controller\n            ActivitiesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/activities/activities.service.ts\n            \n            injectable\n            ActivitiesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/activities/activity.model.ts\n            \n            interface\n            Activity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/activities/activity.schema.ts\n            \n            variable\n            ActivitySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/activities/dto/create-activity.dto.ts\n            \n            class\n            CreateActivityDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/activities/dto/fetch-activities.dto.ts\n            \n            class\n            FetchActivitiesDTO\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/activities/dto/mongo-id.dto.ts\n            \n            class\n            MongoIdDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/activities/dto/update-activity.dto.ts\n            \n            class\n            UpdateActivityDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/exceptions/bad-request.filters.ts\n            \n            class\n            BadRequestFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/exceptions/mongo.filters.ts\n            \n            class\n            MongoFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-account.dto.ts\n            \n            class\n            CreateAccountDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-account.dto.ts\n            \n            class\n            UpdateAccountDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            interface\n            Account\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/user.model.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            variable\n            AccountSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nest-modules/mailer : ^1.1.3\n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/config : ^0.0.7\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/mongoose : ^6.1.2\n        \n            @nestjs/passport : ^6.1.1\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.0\n        \n            moment : ^2.24.0\n        \n            mongoose : ^5.8.2\n        \n            morgan : ^1.9.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            sharp : ^0.23.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccountTypeENUM   (src/.../user.model.ts)\n                        \n                        \n                            ActTypeENUM   (src/.../activity.model.ts)\n                        \n                        \n                            CategoryENUM   (src/.../activity.model.ts)\n                        \n                        \n                            GenderENUM   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/user.model.ts\n    \n        \n            \n                \n                    \n                        \n                        AccountTypeENUM\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : Male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : Female\n                            \n                        \n                        \n                            \n                                 Unspecified\n                            \n                        \n                        \n                            \n                                Value : Unspecified\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        GenderENUM\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : Male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : Female\n                            \n                        \n                        \n                            \n                                 Unspecified\n                            \n                        \n                        \n                            \n                                Value : Unspecified\n                            \n                        \n            \n        \n\n    src/activities/activity.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ActTypeENUM\n                    \n                \n                        \n                            \n                                 EXPENDITURE\n                            \n                        \n                        \n                            \n                                Value : EXPENDITURE\n                            \n                        \n                        \n                            \n                                 REVENUE\n                            \n                        \n                        \n                            \n                                Value : REVENUE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        CategoryENUM\n                    \n                \n                        \n                            \n                                 Automobile\n                            \n                        \n                        \n                            \n                                Value : Automobile\n                            \n                        \n                        \n                            \n                                 Salary\n                            \n                        \n                        \n                            \n                                Value : Salary\n                            \n                        \n                        \n                            \n                                 Savings\n                            \n                        \n                        \n                            \n                                Value : Savings\n                            \n                        \n                        \n                            \n                                 Investment\n                            \n                        \n                        \n                            \n                                Value : Investment\n                            \n                        \n                        \n                            \n                                 Shopping\n                            \n                        \n                        \n                            \n                                Value : Shopping\n                            \n                        \n                        \n                            \n                                 FoodDrinks\n                            \n                        \n                        \n                            \n                                Value : Food & Drinks\n                            \n                        \n                        \n                            \n                                 Education\n                            \n                        \n                        \n                            \n                                Value : Education\n                            \n                        \n                        \n                            \n                                 Entertainment\n                            \n                        \n                        \n                            \n                                Value : Entertainment\n                            \n                        \n                        \n                            \n                                 Furniture\n                            \n                        \n                        \n                            \n                                Value : Furniture\n                            \n                        \n                        \n                            \n                                 Gadget\n                            \n                        \n                        \n                            \n                                Value : Gadget\n                            \n                        \n                        \n                            \n                                 Gift\n                            \n                        \n                        \n                            \n                                Value : Gift\n                            \n                        \n                        \n                            \n                                 Groceries\n                            \n                        \n                        \n                            \n                                Value : Groceries\n                            \n                        \n                        \n                            \n                                 Fitness\n                            \n                        \n                        \n                            \n                                Value : Fitness\n                            \n                        \n                        \n                            \n                                 Loan\n                            \n                        \n                        \n                            \n                                Value : Loan\n                            \n                        \n                        \n                            \n                                 Medical\n                            \n                        \n                        \n                            \n                                Value : Medical\n                            \n                        \n                        \n                            \n                                 Misc\n                            \n                        \n                        \n                            \n                                Value : Misc\n                            \n                        \n                        \n                            \n                                 Housing\n                            \n                        \n                        \n                            \n                                Value : Housing\n                            \n                        \n                        \n                            \n                                 Clothing\n                            \n                        \n                        \n                            \n                                Value : Clothing\n                            \n                        \n                        \n                            \n                                 Tax\n                            \n                        \n                        \n                            \n                                Value : Tax\n                            \n                        \n                        \n                            \n                                 Transport\n                            \n                        \n                        \n                            \n                                Value : Transport\n                            \n                        \n                        \n                            \n                                 Travel\n                            \n                        \n                        \n                            \n                                Value : Travel\n                            \n                        \n                        \n                            \n                                 Utilities\n                            \n                        \n                        \n                            \n                                Value : Utilities\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nXpenz App Api\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ActivitiesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ActivitiesModule\n\n\n\ncluster_ActivitiesModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nActivitiesService\n\nActivitiesService\n\n\n\nActivitiesModule\n\nActivitiesModule\n\nActivitiesModule -->\n\nActivitiesService->ActivitiesModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nActivitiesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AccountSchema   (src/.../user.schema.ts)\n                        \n                        \n                            ActivitySchema   (src/.../activity.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AccountSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema(\n  {\n    name: { type: String },\n    starterAmount: { type: Schema.Types.Decimal128 },\n    theme: { type: String, default: 'default' },\n    type: {\n      type: String,\n      required: true,\n      enum: ['DIGITAL WALLET', 'BANK', 'CREDIT CARD'],\n    },\n  },\n  {\n    timestamps: true,\n    versionKey: false,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true },\n  },\n)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema(\n  {\n    avatar: {\n      type: String,\n    },\n    firstname: { type: String, required: true },\n    lastname: { type: String, required: true },\n    email: {\n      type: String,\n      required: true,\n      unique: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n    dob: {\n      type: Date,\n    },\n    gender: {\n      type: String,\n      default: 'Unspecified',\n      enum: ['Male', 'Female', 'Unspecified'],\n    },\n    accounts: {\n      type: [AccountSchema],\n    },\n  },\n  {\n    timestamps: true,\n    versionKey: false,\n    toJSON: { virtuals: true, getters: true },\n    toObject: { virtuals: true, getters: true },\n  },\n)\n                        \n                    \n\n\n            \n        \n\n    src/activities/activity.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ActivitySchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Schema(\n  {\n    title: { type: String, required: true },\n    description: { type: String },\n    type: {\n      type: String,\n      required: true,\n      enum: ['EXPENDITURE', 'REVENUE'],\n    },\n    category: {\n      type: String,\n      required: true,\n      enum: [\n        'Automobile',\n        'Shopping',\n        'Salary',\n        'Savings',\n        'Investment',\n        'Food & Drinks',\n        'Education',\n        'Entertainment',\n        'Furniture',\n        'Gadget',\n        'Gift',\n        'Groceries',\n        'Fitness',\n        'Loan',\n        'Medical',\n        'Misc',\n        'Housing',\n        'Clothing',\n        'Transport',\n        'Travel',\n        'Utilities',\n      ],\n    },\n    amount: { type: Schema.Types.Decimal128 },\n    account: { type: Schema.ObjectId, ref: 'Account' },\n    owner: { type: Schema.ObjectId, ref: 'User', required: true },\n    date: { type: Date, required: true },\n  },\n  {\n    timestamps: true,\n    versionKey: false,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true },\n  },\n)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
